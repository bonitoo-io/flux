// DO NOT EDIT: This file is autogenerated via the builtin command.

package tickscript

import (
	ast "github.com/influxdata/flux/ast"
	parser "github.com/influxdata/flux/internal/parser"
	runtime "github.com/influxdata/flux/runtime"
	"regexp"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 71,
					Line:   145,
				},
				File:   "tickscript.flux",
				Source: "package tickscript\n\nimport \"experimental\"\nimport \"experimental/array\"\nimport \"influxdata/influxdb\"\nimport \"influxdata/influxdb/monitor\"\nimport \"influxdata/influxdb/schema\"\nimport \"universe\"\n\n// alert is a helper function similar to TICKscript alert.\nalert = (\n    check,\n    id=(r)=>\"${r._check_id}\",\n    details=(r)=>\"\",\n    message=(r)=>\"Threshold Check: ${r._check_name} is: ${r._level}\",\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true,\n    topic=\"\",\n    tables=<-) => {\n\n  _addTopic =\n    if topic != \"\" then\n      (tables=<-) => tables\n        |> set(key: \"_topic\", value: topic )\n        |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n      (tables=<-) => tables\n\n  return tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> _addTopic()\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )\n}\n\n// deadman is a helper function similar to TICKscript deadman.\ndeadman = (\n    check,\n    measurement, threshold=0,\n    id=(r)=>\"${r._check_id}\",\n    message=(r)=>\"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\"),\n    topic=\"\",\n    tables=<-) => {\n\n   // In order to detect empty stream (without tables), it merges input with dummy stream and counts the result,\n   // because count() returns nothing for empty input.\n\n  _dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n    |> map(fn: (r) => ({ r with _measurement: measurement }))\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\") // required by monitor.check\n\n  _counts = union(tables: [_dummy, tables])\n    |> keep(columns: [\"_time\"])\n    |> map(fn: (r) => ({ r with __value__: 0 }))\n    |> count(column: \"__value__\")\n    |> findColumn(fn: (key) => true, column: \"__value__\")\n\n  _tables =\n    if _counts[0] == 1 then // only dummy record is in the merged stream\n      _dummy\n        |> limit(n: 0) // need empty table\n    else\n      tables\n\n  return _tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")\n    |> map(fn: (r) => ({r with _time: now()}))                   // recreate _time column after aggregation\n    |> map(fn: (r) => ({r with dead: r.__value__ <= threshold})) // same tag that monitor.deadman() adds\n    |> drop(columns: [\"__value__\"])\n    |> alert(\n      check: check,\n      id: id,\n      message: message,\n      crit: (r) => r.dead,\n      topic: topic\n    )\n}\n\n// select selects a column and optionally computes aggregated value.\n// It is meant to be a convenience function to be used for:\n//\n//   query(\"SELECT x AS y\")\n//   query(\"SELECT f(x) AS y\") without time grouping\n//\nselect = (column=\"_value\", fn=(column, tables=<-) => tables, as, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}\n\n// selectWindow selects a column with time grouping and computes aggregated values.\n// It is a convenience function to be used as\n//\n//   query(\"SELECT f(x) AS y\")\n//     .groupBy(time(t), ...)\n//\nselectWindow = (column=\"_value\", fn, as, every, defaultValue, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}\n\n// compute computes aggregated value of the input data.\n// It is a convenience function to be used as\n//\n//   |median('x)'\n//      .as(y)\n//\ncompute = select\n\n// groupBy groups by specified columns.\n// It is a convenience function, it adds _measurement column which is required by monitor.check().\ngroupBy = (columns, tables=<-) =>\n  tables\n    |> group(columns: columns)\n    |> experimental.group(columns: [\"_measurement\"], mode:\"extend\") // required by monitor.check\n\n// join merges two streams using standard join().\n// It is meant a convenience function, it ensures _measurement column exists and is in the group key.\njoin = (tables, on=[\"_time\"], measurement) =>\n    universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))\n      |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   48,
					},
					File:   "tickscript.flux",
					Source: "alert = (\n    check,\n    id=(r)=>\"${r._check_id}\",\n    details=(r)=>\"\",\n    message=(r)=>\"Threshold Check: ${r._check_name} is: ${r._level}\",\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true,\n    topic=\"\",\n    tables=<-) => {\n\n  _addTopic =\n    if topic != \"\" then\n      (tables=<-) => tables\n        |> set(key: \"_topic\", value: topic )\n        |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n      (tables=<-) => tables\n\n  return tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> _addTopic()\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )\n}",
					Start: ast.Position{
						Column: 1,
						Line:   11,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   11,
						},
						File:   "tickscript.flux",
						Source: "alert",
						Start: ast.Position{
							Column: 1,
							Line:   11,
						},
					},
				},
				Name: "alert",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   48,
						},
						File:   "tickscript.flux",
						Source: "(\n    check,\n    id=(r)=>\"${r._check_id}\",\n    details=(r)=>\"\",\n    message=(r)=>\"Threshold Check: ${r._check_name} is: ${r._level}\",\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true,\n    topic=\"\",\n    tables=<-) => {\n\n  _addTopic =\n    if topic != \"\" then\n      (tables=<-) => tables\n        |> set(key: \"_topic\", value: topic )\n        |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n      (tables=<-) => tables\n\n  return tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> _addTopic()\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )\n}",
						Start: ast.Position{
							Column: 9,
							Line:   11,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   48,
							},
							File:   "tickscript.flux",
							Source: "{\n\n  _addTopic =\n    if topic != \"\" then\n      (tables=<-) => tables\n        |> set(key: \"_topic\", value: topic )\n        |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n      (tables=<-) => tables\n\n  return tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> _addTopic()\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )\n}",
							Start: ast.Position{
								Column: 19,
								Line:   21,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   29,
								},
								File:   "tickscript.flux",
								Source: "_addTopic =\n    if topic != \"\" then\n      (tables=<-) => tables\n        |> set(key: \"_topic\", value: topic )\n        |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n      (tables=<-) => tables",
								Start: ast.Position{
									Column: 3,
									Line:   23,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   23,
									},
									File:   "tickscript.flux",
									Source: "_addTopic",
									Start: ast.Position{
										Column: 3,
										Line:   23,
									},
								},
							},
							Name: "_addTopic",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   29,
										},
										File:   "tickscript.flux",
										Source: "(tables=<-) => tables",
										Start: ast.Position{
											Column: 7,
											Line:   29,
										},
									},
								},
								Body: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   29,
											},
											File:   "tickscript.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 22,
												Line:   29,
											},
										},
									},
									Name: "tables",
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   29,
											},
											File:   "tickscript.flux",
											Source: "tables=<-",
											Start: ast.Position{
												Column: 8,
												Line:   29,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   29,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 8,
													Line:   29,
												},
											},
										},
										Name: "tables",
									},
									Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   29,
											},
											File:   "tickscript.flux",
											Source: "<-",
											Start: ast.Position{
												Column: 15,
												Line:   29,
											},
										},
									}},
								}},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   29,
									},
									File:   "tickscript.flux",
									Source: "if topic != \"\" then\n      (tables=<-) => tables\n        |> set(key: \"_topic\", value: topic )\n        |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n      (tables=<-) => tables",
									Start: ast.Position{
										Column: 5,
										Line:   24,
									},
								},
							},
							Consequent: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   27,
										},
										File:   "tickscript.flux",
										Source: "(tables=<-) => tables\n        |> set(key: \"_topic\", value: topic )\n        |> experimental.group(mode: \"extend\", columns: [\"_topic\"])",
										Start: ast.Position{
											Column: 7,
											Line:   25,
										},
									},
								},
								Body: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   25,
													},
													File:   "tickscript.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 22,
														Line:   25,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   26,
												},
												File:   "tickscript.flux",
												Source: "tables\n        |> set(key: \"_topic\", value: topic )",
												Start: ast.Position{
													Column: 22,
													Line:   25,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   26,
														},
														File:   "tickscript.flux",
														Source: "key: \"_topic\", value: topic",
														Start: ast.Position{
															Column: 16,
															Line:   26,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   26,
															},
															File:   "tickscript.flux",
															Source: "key: \"_topic\"",
															Start: ast.Position{
																Column: 16,
																Line:   26,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   26,
																},
																File:   "tickscript.flux",
																Source: "key",
																Start: ast.Position{
																	Column: 16,
																	Line:   26,
																},
															},
														},
														Name: "key",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 29,
																	Line:   26,
																},
																File:   "tickscript.flux",
																Source: "\"_topic\"",
																Start: ast.Position{
																	Column: 21,
																	Line:   26,
																},
															},
														},
														Value: "_topic",
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   26,
															},
															File:   "tickscript.flux",
															Source: "value: topic",
															Start: ast.Position{
																Column: 31,
																Line:   26,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   26,
																},
																File:   "tickscript.flux",
																Source: "value",
																Start: ast.Position{
																	Column: 31,
																	Line:   26,
																},
															},
														},
														Name: "value",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   26,
																},
																File:   "tickscript.flux",
																Source: "topic",
																Start: ast.Position{
																	Column: 38,
																	Line:   26,
																},
															},
														},
														Name: "topic",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   26,
													},
													File:   "tickscript.flux",
													Source: "set(key: \"_topic\", value: topic )",
													Start: ast.Position{
														Column: 12,
														Line:   26,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   26,
														},
														File:   "tickscript.flux",
														Source: "set",
														Start: ast.Position{
															Column: 12,
															Line:   26,
														},
													},
												},
												Name: "set",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   27,
											},
											File:   "tickscript.flux",
											Source: "tables\n        |> set(key: \"_topic\", value: topic )\n        |> experimental.group(mode: \"extend\", columns: [\"_topic\"])",
											Start: ast.Position{
												Column: 22,
												Line:   25,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   27,
													},
													File:   "tickscript.flux",
													Source: "mode: \"extend\", columns: [\"_topic\"]",
													Start: ast.Position{
														Column: 31,
														Line:   27,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   27,
														},
														File:   "tickscript.flux",
														Source: "mode: \"extend\"",
														Start: ast.Position{
															Column: 31,
															Line:   27,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   27,
															},
															File:   "tickscript.flux",
															Source: "mode",
															Start: ast.Position{
																Column: 31,
																Line:   27,
															},
														},
													},
													Name: "mode",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   27,
															},
															File:   "tickscript.flux",
															Source: "\"extend\"",
															Start: ast.Position{
																Column: 37,
																Line:   27,
															},
														},
													},
													Value: "extend",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 66,
															Line:   27,
														},
														File:   "tickscript.flux",
														Source: "columns: [\"_topic\"]",
														Start: ast.Position{
															Column: 47,
															Line:   27,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   27,
															},
															File:   "tickscript.flux",
															Source: "columns",
															Start: ast.Position{
																Column: 47,
																Line:   27,
															},
														},
													},
													Name: "columns",
												},
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 66,
																Line:   27,
															},
															File:   "tickscript.flux",
															Source: "[\"_topic\"]",
															Start: ast.Position{
																Column: 56,
																Line:   27,
															},
														},
													},
													Elements: []ast.Expression{&ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 65,
																	Line:   27,
																},
																File:   "tickscript.flux",
																Source: "\"_topic\"",
																Start: ast.Position{
																	Column: 57,
																	Line:   27,
																},
															},
														},
														Value: "_topic",
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 67,
													Line:   27,
												},
												File:   "tickscript.flux",
												Source: "experimental.group(mode: \"extend\", columns: [\"_topic\"])",
												Start: ast.Position{
													Column: 12,
													Line:   27,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   27,
													},
													File:   "tickscript.flux",
													Source: "experimental.group",
													Start: ast.Position{
														Column: 12,
														Line:   27,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   27,
														},
														File:   "tickscript.flux",
														Source: "experimental",
														Start: ast.Position{
															Column: 12,
															Line:   27,
														},
													},
												},
												Name: "experimental",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   27,
														},
														File:   "tickscript.flux",
														Source: "group",
														Start: ast.Position{
															Column: 25,
															Line:   27,
														},
													},
												},
												Name: "group",
											},
										},
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   25,
											},
											File:   "tickscript.flux",
											Source: "tables=<-",
											Start: ast.Position{
												Column: 8,
												Line:   25,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   25,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 8,
													Line:   25,
												},
											},
										},
										Name: "tables",
									},
									Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   25,
											},
											File:   "tickscript.flux",
											Source: "<-",
											Start: ast.Position{
												Column: 15,
												Line:   25,
											},
										},
									}},
								}},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   24,
										},
										File:   "tickscript.flux",
										Source: "topic != \"\"",
										Start: ast.Position{
											Column: 8,
											Line:   24,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   24,
											},
											File:   "tickscript.flux",
											Source: "topic",
											Start: ast.Position{
												Column: 8,
												Line:   24,
											},
										},
									},
									Name: "topic",
								},
								Operator: 18,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   24,
											},
											File:   "tickscript.flux",
											Source: "\"\"",
											Start: ast.Position{
												Column: 17,
												Line:   24,
											},
										},
									},
									Value: "",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   31,
															},
															File:   "tickscript.flux",
															Source: "tables",
															Start: ast.Position{
																Column: 10,
																Line:   31,
															},
														},
													},
													Name: "tables",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 73,
															Line:   32,
														},
														File:   "tickscript.flux",
														Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)",
														Start: ast.Position{
															Column: 10,
															Line:   31,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 72,
																	Line:   32,
																},
																File:   "tickscript.flux",
																Source: "fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/",
																Start: ast.Position{
																	Column: 13,
																	Line:   32,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 72,
																		Line:   32,
																	},
																	File:   "tickscript.flux",
																	Source: "fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/",
																	Start: ast.Position{
																		Column: 13,
																		Line:   32,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 15,
																			Line:   32,
																		},
																		File:   "tickscript.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 13,
																			Line:   32,
																		},
																	},
																},
																Name: "fn",
															},
															Value: &ast.FunctionExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 72,
																			Line:   32,
																		},
																		File:   "tickscript.flux",
																		Source: "(column) => column =~ /_start.*/ or column =~ /_stop.*/",
																		Start: ast.Position{
																			Column: 17,
																			Line:   32,
																		},
																	},
																},
																Body: &ast.LogicalExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 72,
																				Line:   32,
																			},
																			File:   "tickscript.flux",
																			Source: "column =~ /_start.*/ or column =~ /_stop.*/",
																			Start: ast.Position{
																				Column: 29,
																				Line:   32,
																			},
																		},
																	},
																	Left: &ast.BinaryExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 49,
																					Line:   32,
																				},
																				File:   "tickscript.flux",
																				Source: "column =~ /_start.*/",
																				Start: ast.Position{
																					Column: 29,
																					Line:   32,
																				},
																			},
																		},
																		Left: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 35,
																						Line:   32,
																					},
																					File:   "tickscript.flux",
																					Source: "column",
																					Start: ast.Position{
																						Column: 29,
																						Line:   32,
																					},
																				},
																			},
																			Name: "column",
																		},
																		Operator: 19,
																		Right: &ast.RegexpLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 49,
																						Line:   32,
																					},
																					File:   "tickscript.flux",
																					Source: "/_start.*/",
																					Start: ast.Position{
																						Column: 39,
																						Line:   32,
																					},
																				},
																			},
																			Value: regexp.MustCompile("_start.*"),
																		},
																	},
																	Operator: 2,
																	Right: &ast.BinaryExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 72,
																					Line:   32,
																				},
																				File:   "tickscript.flux",
																				Source: "column =~ /_stop.*/",
																				Start: ast.Position{
																					Column: 53,
																					Line:   32,
																				},
																			},
																		},
																		Left: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 59,
																						Line:   32,
																					},
																					File:   "tickscript.flux",
																					Source: "column",
																					Start: ast.Position{
																						Column: 53,
																						Line:   32,
																					},
																				},
																			},
																			Name: "column",
																		},
																		Operator: 19,
																		Right: &ast.RegexpLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 72,
																						Line:   32,
																					},
																					File:   "tickscript.flux",
																					Source: "/_stop.*/",
																					Start: ast.Position{
																						Column: 63,
																						Line:   32,
																					},
																				},
																			},
																			Value: regexp.MustCompile("_stop.*"),
																		},
																	},
																},
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   32,
																			},
																			File:   "tickscript.flux",
																			Source: "column",
																			Start: ast.Position{
																				Column: 18,
																				Line:   32,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 24,
																					Line:   32,
																				},
																				File:   "tickscript.flux",
																				Source: "column",
																				Start: ast.Position{
																					Column: 18,
																					Line:   32,
																				},
																			},
																		},
																		Name: "column",
																	},
																	Value: nil,
																}},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 73,
																Line:   32,
															},
															File:   "tickscript.flux",
															Source: "drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)",
															Start: ast.Position{
																Column: 8,
																Line:   32,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 12,
																	Line:   32,
																},
																File:   "tickscript.flux",
																Source: "drop",
																Start: ast.Position{
																	Column: 8,
																	Line:   32,
																},
															},
														},
														Name: "drop",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 8,
														Line:   36,
													},
													File:   "tickscript.flux",
													Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))",
													Start: ast.Position{
														Column: 10,
														Line:   31,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 7,
																Line:   36,
															},
															File:   "tickscript.flux",
															Source: "fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    })",
															Start: ast.Position{
																Column: 12,
																Line:   33,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 7,
																	Line:   36,
																},
																File:   "tickscript.flux",
																Source: "fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    })",
																Start: ast.Position{
																	Column: 12,
																	Line:   33,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 14,
																		Line:   33,
																	},
																	File:   "tickscript.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 12,
																		Line:   33,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 7,
																		Line:   36,
																	},
																	File:   "tickscript.flux",
																	Source: "(r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    })",
																	Start: ast.Position{
																		Column: 16,
																		Line:   33,
																	},
																},
															},
															Body: &ast.ParenExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 7,
																			Line:   36,
																		},
																		File:   "tickscript.flux",
																		Source: "({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    })",
																		Start: ast.Position{
																			Column: 23,
																			Line:   33,
																		},
																	},
																},
																Expression: &ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 6,
																				Line:   36,
																			},
																			File:   "tickscript.flux",
																			Source: "{r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }",
																			Start: ast.Position{
																				Column: 24,
																				Line:   33,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   34,
																				},
																				File:   "tickscript.flux",
																				Source: "_check_id: check._check_id",
																				Start: ast.Position{
																					Column: 9,
																					Line:   34,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 18,
																						Line:   34,
																					},
																					File:   "tickscript.flux",
																					Source: "_check_id",
																					Start: ast.Position{
																						Column: 9,
																						Line:   34,
																					},
																				},
																			},
																			Name: "_check_id",
																		},
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 35,
																						Line:   34,
																					},
																					File:   "tickscript.flux",
																					Source: "check._check_id",
																					Start: ast.Position{
																						Column: 20,
																						Line:   34,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 25,
																							Line:   34,
																						},
																						File:   "tickscript.flux",
																						Source: "check",
																						Start: ast.Position{
																							Column: 20,
																							Line:   34,
																						},
																					},
																				},
																				Name: "check",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 35,
																							Line:   34,
																						},
																						File:   "tickscript.flux",
																						Source: "_check_id",
																						Start: ast.Position{
																							Column: 26,
																							Line:   34,
																						},
																					},
																				},
																				Name: "_check_id",
																			},
																		},
																	}, &ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 39,
																					Line:   35,
																				},
																				File:   "tickscript.flux",
																				Source: "_check_name: check._check_name",
																				Start: ast.Position{
																					Column: 9,
																					Line:   35,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 20,
																						Line:   35,
																					},
																					File:   "tickscript.flux",
																					Source: "_check_name",
																					Start: ast.Position{
																						Column: 9,
																						Line:   35,
																					},
																				},
																			},
																			Name: "_check_name",
																		},
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 39,
																						Line:   35,
																					},
																					File:   "tickscript.flux",
																					Source: "check._check_name",
																					Start: ast.Position{
																						Column: 22,
																						Line:   35,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 27,
																							Line:   35,
																						},
																						File:   "tickscript.flux",
																						Source: "check",
																						Start: ast.Position{
																							Column: 22,
																							Line:   35,
																						},
																					},
																				},
																				Name: "check",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 39,
																							Line:   35,
																						},
																						File:   "tickscript.flux",
																						Source: "_check_name",
																						Start: ast.Position{
																							Column: 28,
																							Line:   35,
																						},
																					},
																				},
																				Name: "_check_name",
																			},
																		},
																	}},
																	With: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 26,
																					Line:   33,
																				},
																				File:   "tickscript.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 25,
																					Line:   33,
																				},
																			},
																		},
																		Name: "r",
																	},
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   33,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   33,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 18,
																				Line:   33,
																			},
																			File:   "tickscript.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 17,
																				Line:   33,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 8,
															Line:   36,
														},
														File:   "tickscript.flux",
														Source: "map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))",
														Start: ast.Position{
															Column: 8,
															Line:   33,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   33,
															},
															File:   "tickscript.flux",
															Source: "map",
															Start: ast.Position{
																Column: 8,
																Line:   33,
															},
														},
													},
													Name: "map",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   37,
												},
												File:   "tickscript.flux",
												Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))\n    |> map(fn: (r) => ({ r with id: id(r: r) }))",
												Start: ast.Position{
													Column: 10,
													Line:   31,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   37,
														},
														File:   "tickscript.flux",
														Source: "fn: (r) => ({ r with id: id(r: r) })",
														Start: ast.Position{
															Column: 12,
															Line:   37,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   37,
															},
															File:   "tickscript.flux",
															Source: "fn: (r) => ({ r with id: id(r: r) })",
															Start: ast.Position{
																Column: 12,
																Line:   37,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 14,
																	Line:   37,
																},
																File:   "tickscript.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 12,
																	Line:   37,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 48,
																	Line:   37,
																},
																File:   "tickscript.flux",
																Source: "(r) => ({ r with id: id(r: r) })",
																Start: ast.Position{
																	Column: 16,
																	Line:   37,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 48,
																		Line:   37,
																	},
																	File:   "tickscript.flux",
																	Source: "({ r with id: id(r: r) })",
																	Start: ast.Position{
																		Column: 23,
																		Line:   37,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   37,
																		},
																		File:   "tickscript.flux",
																		Source: "{ r with id: id(r: r) }",
																		Start: ast.Position{
																			Column: 24,
																			Line:   37,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   37,
																			},
																			File:   "tickscript.flux",
																			Source: "id: id(r: r)",
																			Start: ast.Position{
																				Column: 33,
																				Line:   37,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   37,
																				},
																				File:   "tickscript.flux",
																				Source: "id",
																				Start: ast.Position{
																					Column: 33,
																					Line:   37,
																				},
																			},
																		},
																		Name: "id",
																	},
																	Value: &ast.CallExpression{
																		Arguments: []ast.Expression{&ast.ObjectExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 44,
																						Line:   37,
																					},
																					File:   "tickscript.flux",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 40,
																						Line:   37,
																					},
																				},
																			},
																			Properties: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 44,
																							Line:   37,
																						},
																						File:   "tickscript.flux",
																						Source: "r: r",
																						Start: ast.Position{
																							Column: 40,
																							Line:   37,
																						},
																					},
																				},
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 41,
																								Line:   37,
																							},
																							File:   "tickscript.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 40,
																								Line:   37,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Value: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 44,
																								Line:   37,
																							},
																							File:   "tickscript.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 43,
																								Line:   37,
																							},
																						},
																					},
																					Name: "r",
																				},
																			}},
																			With: nil,
																		}},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 45,
																					Line:   37,
																				},
																				File:   "tickscript.flux",
																				Source: "id(r: r)",
																				Start: ast.Position{
																					Column: 37,
																					Line:   37,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 39,
																						Line:   37,
																					},
																					File:   "tickscript.flux",
																					Source: "id",
																					Start: ast.Position{
																						Column: 37,
																						Line:   37,
																					},
																				},
																			},
																			Name: "id",
																		},
																	},
																}},
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 27,
																				Line:   37,
																			},
																			File:   "tickscript.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 26,
																				Line:   37,
																			},
																		},
																	},
																	Name: "r",
																},
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   37,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   37,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   37,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   37,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   37,
													},
													File:   "tickscript.flux",
													Source: "map(fn: (r) => ({ r with id: id(r: r) }))",
													Start: ast.Position{
														Column: 8,
														Line:   37,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   37,
														},
														File:   "tickscript.flux",
														Source: "map",
														Start: ast.Position{
															Column: 8,
															Line:   37,
														},
													},
												},
												Name: "map",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   38,
											},
											File:   "tickscript.flux",
											Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))",
											Start: ast.Position{
												Column: 10,
												Line:   31,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   38,
													},
													File:   "tickscript.flux",
													Source: "fn: (r) => ({ r with details: details(r: r) })",
													Start: ast.Position{
														Column: 12,
														Line:   38,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   38,
														},
														File:   "tickscript.flux",
														Source: "fn: (r) => ({ r with details: details(r: r) })",
														Start: ast.Position{
															Column: 12,
															Line:   38,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   38,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 12,
																Line:   38,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 58,
																Line:   38,
															},
															File:   "tickscript.flux",
															Source: "(r) => ({ r with details: details(r: r) })",
															Start: ast.Position{
																Column: 16,
																Line:   38,
															},
														},
													},
													Body: &ast.ParenExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   38,
																},
																File:   "tickscript.flux",
																Source: "({ r with details: details(r: r) })",
																Start: ast.Position{
																	Column: 23,
																	Line:   38,
																},
															},
														},
														Expression: &ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 57,
																		Line:   38,
																	},
																	File:   "tickscript.flux",
																	Source: "{ r with details: details(r: r) }",
																	Start: ast.Position{
																		Column: 24,
																		Line:   38,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 55,
																			Line:   38,
																		},
																		File:   "tickscript.flux",
																		Source: "details: details(r: r)",
																		Start: ast.Position{
																			Column: 33,
																			Line:   38,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 40,
																				Line:   38,
																			},
																			File:   "tickscript.flux",
																			Source: "details",
																			Start: ast.Position{
																				Column: 33,
																				Line:   38,
																			},
																		},
																	},
																	Name: "details",
																},
																Value: &ast.CallExpression{
																	Arguments: []ast.Expression{&ast.ObjectExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 54,
																					Line:   38,
																				},
																				File:   "tickscript.flux",
																				Source: "r: r",
																				Start: ast.Position{
																					Column: 50,
																					Line:   38,
																				},
																			},
																		},
																		Properties: []*ast.Property{&ast.Property{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 54,
																						Line:   38,
																					},
																					File:   "tickscript.flux",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 50,
																						Line:   38,
																					},
																				},
																			},
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 51,
																							Line:   38,
																						},
																						File:   "tickscript.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 50,
																							Line:   38,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Value: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 54,
																							Line:   38,
																						},
																						File:   "tickscript.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 53,
																							Line:   38,
																						},
																					},
																				},
																				Name: "r",
																			},
																		}},
																		With: nil,
																	}},
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 55,
																				Line:   38,
																			},
																			File:   "tickscript.flux",
																			Source: "details(r: r)",
																			Start: ast.Position{
																				Column: 42,
																				Line:   38,
																			},
																		},
																	},
																	Callee: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 49,
																					Line:   38,
																				},
																				File:   "tickscript.flux",
																				Source: "details",
																				Start: ast.Position{
																					Column: 42,
																					Line:   38,
																				},
																			},
																		},
																		Name: "details",
																	},
																},
															}},
															With: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 27,
																			Line:   38,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 26,
																			Line:   38,
																		},
																	},
																},
																Name: "r",
															},
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   38,
																},
																File:   "tickscript.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   38,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   38,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   38,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   38,
												},
												File:   "tickscript.flux",
												Source: "map(fn: (r) => ({ r with details: details(r: r) }))",
												Start: ast.Position{
													Column: 8,
													Line:   38,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   38,
													},
													File:   "tickscript.flux",
													Source: "map",
													Start: ast.Position{
														Column: 8,
														Line:   38,
													},
												},
											},
											Name: "map",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   39,
										},
										File:   "tickscript.flux",
										Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> _addTopic()",
										Start: ast.Position{
											Column: 10,
											Line:   31,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: nil,
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   39,
											},
											File:   "tickscript.flux",
											Source: "_addTopic()",
											Start: ast.Position{
												Column: 8,
												Line:   39,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   39,
												},
												File:   "tickscript.flux",
												Source: "_addTopic",
												Start: ast.Position{
													Column: 8,
													Line:   39,
												},
											},
										},
										Name: "_addTopic",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   47,
									},
									File:   "tickscript.flux",
									Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> _addTopic()\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )",
									Start: ast.Position{
										Column: 10,
										Line:   31,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   46,
											},
											File:   "tickscript.flux",
											Source: "crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check",
											Start: ast.Position{
												Column: 9,
												Line:   41,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   41,
												},
												File:   "tickscript.flux",
												Source: "crit: crit",
												Start: ast.Position{
													Column: 9,
													Line:   41,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   41,
													},
													File:   "tickscript.flux",
													Source: "crit",
													Start: ast.Position{
														Column: 9,
														Line:   41,
													},
												},
											},
											Name: "crit",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   41,
													},
													File:   "tickscript.flux",
													Source: "crit",
													Start: ast.Position{
														Column: 15,
														Line:   41,
													},
												},
											},
											Name: "crit",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   42,
												},
												File:   "tickscript.flux",
												Source: "warn: warn",
												Start: ast.Position{
													Column: 9,
													Line:   42,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   42,
													},
													File:   "tickscript.flux",
													Source: "warn",
													Start: ast.Position{
														Column: 9,
														Line:   42,
													},
												},
											},
											Name: "warn",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   42,
													},
													File:   "tickscript.flux",
													Source: "warn",
													Start: ast.Position{
														Column: 15,
														Line:   42,
													},
												},
											},
											Name: "warn",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   43,
												},
												File:   "tickscript.flux",
												Source: "info: info",
												Start: ast.Position{
													Column: 9,
													Line:   43,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   43,
													},
													File:   "tickscript.flux",
													Source: "info",
													Start: ast.Position{
														Column: 9,
														Line:   43,
													},
												},
											},
											Name: "info",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   43,
													},
													File:   "tickscript.flux",
													Source: "info",
													Start: ast.Position{
														Column: 15,
														Line:   43,
													},
												},
											},
											Name: "info",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   44,
												},
												File:   "tickscript.flux",
												Source: "ok: ok",
												Start: ast.Position{
													Column: 9,
													Line:   44,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   44,
													},
													File:   "tickscript.flux",
													Source: "ok",
													Start: ast.Position{
														Column: 9,
														Line:   44,
													},
												},
											},
											Name: "ok",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   44,
													},
													File:   "tickscript.flux",
													Source: "ok",
													Start: ast.Position{
														Column: 13,
														Line:   44,
													},
												},
											},
											Name: "ok",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   45,
												},
												File:   "tickscript.flux",
												Source: "messageFn: message",
												Start: ast.Position{
													Column: 9,
													Line:   45,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   45,
													},
													File:   "tickscript.flux",
													Source: "messageFn",
													Start: ast.Position{
														Column: 9,
														Line:   45,
													},
												},
											},
											Name: "messageFn",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   45,
													},
													File:   "tickscript.flux",
													Source: "message",
													Start: ast.Position{
														Column: 20,
														Line:   45,
													},
												},
											},
											Name: "message",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   46,
												},
												File:   "tickscript.flux",
												Source: "data: check",
												Start: ast.Position{
													Column: 9,
													Line:   46,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   46,
													},
													File:   "tickscript.flux",
													Source: "data",
													Start: ast.Position{
														Column: 9,
														Line:   46,
													},
												},
											},
											Name: "data",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   46,
													},
													File:   "tickscript.flux",
													Source: "check",
													Start: ast.Position{
														Column: 15,
														Line:   46,
													},
												},
											},
											Name: "check",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   47,
										},
										File:   "tickscript.flux",
										Source: "monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )",
										Start: ast.Position{
											Column: 8,
											Line:   40,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   40,
											},
											File:   "tickscript.flux",
											Source: "monitor.check",
											Start: ast.Position{
												Column: 8,
												Line:   40,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   40,
												},
												File:   "tickscript.flux",
												Source: "monitor",
												Start: ast.Position{
													Column: 8,
													Line:   40,
												},
											},
										},
										Name: "monitor",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   40,
												},
												File:   "tickscript.flux",
												Source: "check",
												Start: ast.Position{
													Column: 16,
													Line:   40,
												},
											},
										},
										Name: "check",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   47,
								},
								File:   "tickscript.flux",
								Source: "return tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({r with\n        _check_id: check._check_id,\n        _check_name: check._check_name,\n    }))\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> _addTopic()\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )",
								Start: ast.Position{
									Column: 3,
									Line:   31,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   12,
							},
							File:   "tickscript.flux",
							Source: "check",
							Start: ast.Position{
								Column: 5,
								Line:   12,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   12,
								},
								File:   "tickscript.flux",
								Source: "check",
								Start: ast.Position{
									Column: 5,
									Line:   12,
								},
							},
						},
						Name: "check",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   13,
							},
							File:   "tickscript.flux",
							Source: "id=(r)=>\"${r._check_id}\"",
							Start: ast.Position{
								Column: 5,
								Line:   13,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 7,
									Line:   13,
								},
								File:   "tickscript.flux",
								Source: "id",
								Start: ast.Position{
									Column: 5,
									Line:   13,
								},
							},
						},
						Name: "id",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   13,
								},
								File:   "tickscript.flux",
								Source: "(r)=>\"${r._check_id}\"",
								Start: ast.Position{
									Column: 8,
									Line:   13,
								},
							},
						},
						Body: &ast.StringExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   13,
									},
									File:   "tickscript.flux",
									Source: "\"${r._check_id}\"",
									Start: ast.Position{
										Column: 13,
										Line:   13,
									},
								},
							},
							Parts: []ast.StringExpressionPart{&ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   13,
										},
										File:   "tickscript.flux",
										Source: "${r._check_id}",
										Start: ast.Position{
											Column: 14,
											Line:   13,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   13,
											},
											File:   "tickscript.flux",
											Source: "r._check_id",
											Start: ast.Position{
												Column: 16,
												Line:   13,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   13,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 16,
													Line:   13,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   13,
												},
												File:   "tickscript.flux",
												Source: "_check_id",
												Start: ast.Position{
													Column: 18,
													Line:   13,
												},
											},
										},
										Name: "_check_id",
									},
								},
							}},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   13,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 9,
										Line:   13,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   13,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 9,
											Line:   13,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   14,
							},
							File:   "tickscript.flux",
							Source: "details=(r)=>\"\"",
							Start: ast.Position{
								Column: 5,
								Line:   14,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   14,
								},
								File:   "tickscript.flux",
								Source: "details",
								Start: ast.Position{
									Column: 5,
									Line:   14,
								},
							},
						},
						Name: "details",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   14,
								},
								File:   "tickscript.flux",
								Source: "(r)=>\"\"",
								Start: ast.Position{
									Column: 13,
									Line:   14,
								},
							},
						},
						Body: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   14,
									},
									File:   "tickscript.flux",
									Source: "\"\"",
									Start: ast.Position{
										Column: 18,
										Line:   14,
									},
								},
							},
							Value: "",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   14,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 14,
										Line:   14,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   14,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 14,
											Line:   14,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 69,
								Line:   15,
							},
							File:   "tickscript.flux",
							Source: "message=(r)=>\"Threshold Check: ${r._check_name} is: ${r._level}\"",
							Start: ast.Position{
								Column: 5,
								Line:   15,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   15,
								},
								File:   "tickscript.flux",
								Source: "message",
								Start: ast.Position{
									Column: 5,
									Line:   15,
								},
							},
						},
						Name: "message",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   15,
								},
								File:   "tickscript.flux",
								Source: "(r)=>\"Threshold Check: ${r._check_name} is: ${r._level}\"",
								Start: ast.Position{
									Column: 13,
									Line:   15,
								},
							},
						},
						Body: &ast.StringExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   15,
									},
									File:   "tickscript.flux",
									Source: "\"Threshold Check: ${r._check_name} is: ${r._level}\"",
									Start: ast.Position{
										Column: 18,
										Line:   15,
									},
								},
							},
							Parts: []ast.StringExpressionPart{&ast.TextPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   15,
										},
										File:   "tickscript.flux",
										Source: "Threshold Check: ",
										Start: ast.Position{
											Column: 19,
											Line:   15,
										},
									},
								},
								Value: "Threshold Check: ",
							}, &ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   15,
										},
										File:   "tickscript.flux",
										Source: "${r._check_name}",
										Start: ast.Position{
											Column: 36,
											Line:   15,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   15,
											},
											File:   "tickscript.flux",
											Source: "r._check_name",
											Start: ast.Position{
												Column: 38,
												Line:   15,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   15,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 38,
													Line:   15,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   15,
												},
												File:   "tickscript.flux",
												Source: "_check_name",
												Start: ast.Position{
													Column: 40,
													Line:   15,
												},
											},
										},
										Name: "_check_name",
									},
								},
							}, &ast.TextPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   15,
										},
										File:   "tickscript.flux",
										Source: " is: ",
										Start: ast.Position{
											Column: 52,
											Line:   15,
										},
									},
								},
								Value: " is: ",
							}, &ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   15,
										},
										File:   "tickscript.flux",
										Source: "${r._level}",
										Start: ast.Position{
											Column: 57,
											Line:   15,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   15,
											},
											File:   "tickscript.flux",
											Source: "r._level",
											Start: ast.Position{
												Column: 59,
												Line:   15,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 60,
													Line:   15,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 59,
													Line:   15,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 67,
													Line:   15,
												},
												File:   "tickscript.flux",
												Source: "_level",
												Start: ast.Position{
													Column: 61,
													Line:   15,
												},
											},
										},
										Name: "_level",
									},
								},
							}},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   15,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 14,
										Line:   15,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   15,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 14,
											Line:   15,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   16,
							},
							File:   "tickscript.flux",
							Source: "crit=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   16,
								},
								File:   "tickscript.flux",
								Source: "crit",
								Start: ast.Position{
									Column: 5,
									Line:   16,
								},
							},
						},
						Name: "crit",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   16,
								},
								File:   "tickscript.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   16,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   16,
									},
									File:   "tickscript.flux",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   16,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   16,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   16,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   16,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   16,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   17,
							},
							File:   "tickscript.flux",
							Source: "warn=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   17,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   17,
								},
								File:   "tickscript.flux",
								Source: "warn",
								Start: ast.Position{
									Column: 5,
									Line:   17,
								},
							},
						},
						Name: "warn",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   17,
								},
								File:   "tickscript.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   17,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   17,
									},
									File:   "tickscript.flux",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   17,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   17,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   17,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   17,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   17,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   18,
							},
							File:   "tickscript.flux",
							Source: "info=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   18,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   18,
								},
								File:   "tickscript.flux",
								Source: "info",
								Start: ast.Position{
									Column: 5,
									Line:   18,
								},
							},
						},
						Name: "info",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   18,
								},
								File:   "tickscript.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   18,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   18,
									},
									File:   "tickscript.flux",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   18,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   18,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   18,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   18,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   18,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   19,
							},
							File:   "tickscript.flux",
							Source: "ok=(r) => true",
							Start: ast.Position{
								Column: 5,
								Line:   19,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 7,
									Line:   19,
								},
								File:   "tickscript.flux",
								Source: "ok",
								Start: ast.Position{
									Column: 5,
									Line:   19,
								},
							},
						},
						Name: "ok",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   19,
								},
								File:   "tickscript.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 8,
									Line:   19,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   19,
									},
									File:   "tickscript.flux",
									Source: "true",
									Start: ast.Position{
										Column: 15,
										Line:   19,
									},
								},
							},
							Name: "true",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   19,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 9,
										Line:   19,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   19,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 9,
											Line:   19,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   20,
							},
							File:   "tickscript.flux",
							Source: "topic=\"\"",
							Start: ast.Position{
								Column: 5,
								Line:   20,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   20,
								},
								File:   "tickscript.flux",
								Source: "topic",
								Start: ast.Position{
									Column: 5,
									Line:   20,
								},
							},
						},
						Name: "topic",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   20,
								},
								File:   "tickscript.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 11,
									Line:   20,
								},
							},
						},
						Value: "",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   21,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 5,
								Line:   21,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   21,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   21,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   21,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 12,
								Line:   21,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   92,
					},
					File:   "tickscript.flux",
					Source: "deadman = (\n    check,\n    measurement, threshold=0,\n    id=(r)=>\"${r._check_id}\",\n    message=(r)=>\"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\"),\n    topic=\"\",\n    tables=<-) => {\n\n   // In order to detect empty stream (without tables), it merges input with dummy stream and counts the result,\n   // because count() returns nothing for empty input.\n\n  _dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n    |> map(fn: (r) => ({ r with _measurement: measurement }))\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\") // required by monitor.check\n\n  _counts = union(tables: [_dummy, tables])\n    |> keep(columns: [\"_time\"])\n    |> map(fn: (r) => ({ r with __value__: 0 }))\n    |> count(column: \"__value__\")\n    |> findColumn(fn: (key) => true, column: \"__value__\")\n\n  _tables =\n    if _counts[0] == 1 then // only dummy record is in the merged stream\n      _dummy\n        |> limit(n: 0) // need empty table\n    else\n      tables\n\n  return _tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")\n    |> map(fn: (r) => ({r with _time: now()}))                   // recreate _time column after aggregation\n    |> map(fn: (r) => ({r with dead: r.__value__ <= threshold})) // same tag that monitor.deadman() adds\n    |> drop(columns: [\"__value__\"])\n    |> alert(\n      check: check,\n      id: id,\n      message: message,\n      crit: (r) => r.dead,\n      topic: topic\n    )\n}",
					Start: ast.Position{
						Column: 1,
						Line:   51,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   51,
						},
						File:   "tickscript.flux",
						Source: "deadman",
						Start: ast.Position{
							Column: 1,
							Line:   51,
						},
					},
				},
				Name: "deadman",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   92,
						},
						File:   "tickscript.flux",
						Source: "(\n    check,\n    measurement, threshold=0,\n    id=(r)=>\"${r._check_id}\",\n    message=(r)=>\"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\"),\n    topic=\"\",\n    tables=<-) => {\n\n   // In order to detect empty stream (without tables), it merges input with dummy stream and counts the result,\n   // because count() returns nothing for empty input.\n\n  _dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n    |> map(fn: (r) => ({ r with _measurement: measurement }))\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\") // required by monitor.check\n\n  _counts = union(tables: [_dummy, tables])\n    |> keep(columns: [\"_time\"])\n    |> map(fn: (r) => ({ r with __value__: 0 }))\n    |> count(column: \"__value__\")\n    |> findColumn(fn: (key) => true, column: \"__value__\")\n\n  _tables =\n    if _counts[0] == 1 then // only dummy record is in the merged stream\n      _dummy\n        |> limit(n: 0) // need empty table\n    else\n      tables\n\n  return _tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")\n    |> map(fn: (r) => ({r with _time: now()}))                   // recreate _time column after aggregation\n    |> map(fn: (r) => ({r with dead: r.__value__ <= threshold})) // same tag that monitor.deadman() adds\n    |> drop(columns: [\"__value__\"])\n    |> alert(\n      check: check,\n      id: id,\n      message: message,\n      crit: (r) => r.dead,\n      topic: topic\n    )\n}",
						Start: ast.Position{
							Column: 11,
							Line:   51,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   92,
							},
							File:   "tickscript.flux",
							Source: "{\n\n   // In order to detect empty stream (without tables), it merges input with dummy stream and counts the result,\n   // because count() returns nothing for empty input.\n\n  _dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n    |> map(fn: (r) => ({ r with _measurement: measurement }))\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\") // required by monitor.check\n\n  _counts = union(tables: [_dummy, tables])\n    |> keep(columns: [\"_time\"])\n    |> map(fn: (r) => ({ r with __value__: 0 }))\n    |> count(column: \"__value__\")\n    |> findColumn(fn: (key) => true, column: \"__value__\")\n\n  _tables =\n    if _counts[0] == 1 then // only dummy record is in the merged stream\n      _dummy\n        |> limit(n: 0) // need empty table\n    else\n      tables\n\n  return _tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")\n    |> map(fn: (r) => ({r with _time: now()}))                   // recreate _time column after aggregation\n    |> map(fn: (r) => ({r with dead: r.__value__ <= threshold})) // same tag that monitor.deadman() adds\n    |> drop(columns: [\"__value__\"])\n    |> alert(\n      check: check,\n      id: id,\n      message: message,\n      crit: (r) => r.dead,\n      topic: topic\n    )\n}",
							Start: ast.Position{
								Column: 19,
								Line:   57,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   64,
								},
								File:   "tickscript.flux",
								Source: "_dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n    |> map(fn: (r) => ({ r with _measurement: measurement }))\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
								Start: ast.Position{
									Column: 3,
									Line:   62,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   62,
									},
									File:   "tickscript.flux",
									Source: "_dummy",
									Start: ast.Position{
										Column: 3,
										Line:   62,
									},
								},
							},
							Name: "_dummy",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 90,
													Line:   62,
												},
												File:   "tickscript.flux",
												Source: "rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}]",
												Start: ast.Position{
													Column: 23,
													Line:   62,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 90,
														Line:   62,
													},
													File:   "tickscript.flux",
													Source: "rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}]",
													Start: ast.Position{
														Column: 23,
														Line:   62,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   62,
														},
														File:   "tickscript.flux",
														Source: "rows",
														Start: ast.Position{
															Column: 23,
															Line:   62,
														},
													},
												},
												Name: "rows",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 90,
															Line:   62,
														},
														File:   "tickscript.flux",
														Source: "[{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}]",
														Start: ast.Position{
															Column: 29,
															Line:   62,
														},
													},
												},
												Elements: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 89,
																Line:   62,
															},
															File:   "tickscript.flux",
															Source: "{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}",
															Start: ast.Position{
																Column: 30,
																Line:   62,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   62,
																},
																File:   "tickscript.flux",
																Source: "_time: 2000-01-01T00:00:00Z",
																Start: ast.Position{
																	Column: 31,
																	Line:   62,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   62,
																	},
																	File:   "tickscript.flux",
																	Source: "_time",
																	Start: ast.Position{
																		Column: 31,
																		Line:   62,
																	},
																},
															},
															Name: "_time",
														},
														Value: &ast.DateTimeLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 58,
																		Line:   62,
																	},
																	File:   "tickscript.flux",
																	Source: "2000-01-01T00:00:00Z",
																	Start: ast.Position{
																		Column: 38,
																		Line:   62,
																	},
																},
															},
															Value: parser.MustParseTime("2000-01-01T00:00:00Z"),
														},
													}, &ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 77,
																	Line:   62,
																},
																File:   "tickscript.flux",
																Source: "_field: \"unknown\"",
																Start: ast.Position{
																	Column: 60,
																	Line:   62,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 66,
																		Line:   62,
																	},
																	File:   "tickscript.flux",
																	Source: "_field",
																	Start: ast.Position{
																		Column: 60,
																		Line:   62,
																	},
																},
															},
															Name: "_field",
														},
														Value: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 77,
																		Line:   62,
																	},
																	File:   "tickscript.flux",
																	Source: "\"unknown\"",
																	Start: ast.Position{
																		Column: 68,
																		Line:   62,
																	},
																},
															},
															Value: "unknown",
														},
													}, &ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 88,
																	Line:   62,
																},
																File:   "tickscript.flux",
																Source: "_value: 0",
																Start: ast.Position{
																	Column: 79,
																	Line:   62,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 85,
																		Line:   62,
																	},
																	File:   "tickscript.flux",
																	Source: "_value",
																	Start: ast.Position{
																		Column: 79,
																		Line:   62,
																	},
																},
															},
															Name: "_value",
														},
														Value: &ast.IntegerLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 88,
																		Line:   62,
																	},
																	File:   "tickscript.flux",
																	Source: "0",
																	Start: ast.Position{
																		Column: 87,
																		Line:   62,
																	},
																},
															},
															Value: int64(0),
														},
													}},
													With: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 91,
												Line:   62,
											},
											File:   "tickscript.flux",
											Source: "array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])",
											Start: ast.Position{
												Column: 12,
												Line:   62,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   62,
												},
												File:   "tickscript.flux",
												Source: "array.from",
												Start: ast.Position{
													Column: 12,
													Line:   62,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   62,
													},
													File:   "tickscript.flux",
													Source: "array",
													Start: ast.Position{
														Column: 12,
														Line:   62,
													},
												},
											},
											Name: "array",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   62,
													},
													File:   "tickscript.flux",
													Source: "from",
													Start: ast.Position{
														Column: 18,
														Line:   62,
													},
												},
											},
											Name: "from",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   63,
										},
										File:   "tickscript.flux",
										Source: "array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n    |> map(fn: (r) => ({ r with _measurement: measurement }))",
										Start: ast.Position{
											Column: 12,
											Line:   62,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   63,
												},
												File:   "tickscript.flux",
												Source: "fn: (r) => ({ r with _measurement: measurement })",
												Start: ast.Position{
													Column: 12,
													Line:   63,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   63,
													},
													File:   "tickscript.flux",
													Source: "fn: (r) => ({ r with _measurement: measurement })",
													Start: ast.Position{
														Column: 12,
														Line:   63,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 14,
															Line:   63,
														},
														File:   "tickscript.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 12,
															Line:   63,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   63,
														},
														File:   "tickscript.flux",
														Source: "(r) => ({ r with _measurement: measurement })",
														Start: ast.Position{
															Column: 16,
															Line:   63,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 61,
																Line:   63,
															},
															File:   "tickscript.flux",
															Source: "({ r with _measurement: measurement })",
															Start: ast.Position{
																Column: 23,
																Line:   63,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   63,
																},
																File:   "tickscript.flux",
																Source: "{ r with _measurement: measurement }",
																Start: ast.Position{
																	Column: 24,
																	Line:   63,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 58,
																		Line:   63,
																	},
																	File:   "tickscript.flux",
																	Source: "_measurement: measurement",
																	Start: ast.Position{
																		Column: 33,
																		Line:   63,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 45,
																			Line:   63,
																		},
																		File:   "tickscript.flux",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 33,
																			Line:   63,
																		},
																	},
																},
																Name: "_measurement",
															},
															Value: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 58,
																			Line:   63,
																		},
																		File:   "tickscript.flux",
																		Source: "measurement",
																		Start: ast.Position{
																			Column: 47,
																			Line:   63,
																		},
																	},
																},
																Name: "measurement",
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 27,
																		Line:   63,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 26,
																		Line:   63,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   63,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 17,
																Line:   63,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   63,
																},
																File:   "tickscript.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   63,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   63,
											},
											File:   "tickscript.flux",
											Source: "map(fn: (r) => ({ r with _measurement: measurement }))",
											Start: ast.Position{
												Column: 8,
												Line:   63,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   63,
												},
												File:   "tickscript.flux",
												Source: "map",
												Start: ast.Position{
													Column: 8,
													Line:   63,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   64,
									},
									File:   "tickscript.flux",
									Source: "array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n    |> map(fn: (r) => ({ r with _measurement: measurement }))\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
									Start: ast.Position{
										Column: 12,
										Line:   62,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   64,
											},
											File:   "tickscript.flux",
											Source: "columns: [\"_measurement\"], mode: \"extend\"",
											Start: ast.Position{
												Column: 27,
												Line:   64,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   64,
												},
												File:   "tickscript.flux",
												Source: "columns: [\"_measurement\"]",
												Start: ast.Position{
													Column: 27,
													Line:   64,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   64,
													},
													File:   "tickscript.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 27,
														Line:   64,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 52,
														Line:   64,
													},
													File:   "tickscript.flux",
													Source: "[\"_measurement\"]",
													Start: ast.Position{
														Column: 36,
														Line:   64,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   64,
														},
														File:   "tickscript.flux",
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 37,
															Line:   64,
														},
													},
												},
												Value: "_measurement",
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 68,
													Line:   64,
												},
												File:   "tickscript.flux",
												Source: "mode: \"extend\"",
												Start: ast.Position{
													Column: 54,
													Line:   64,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   64,
													},
													File:   "tickscript.flux",
													Source: "mode",
													Start: ast.Position{
														Column: 54,
														Line:   64,
													},
												},
											},
											Name: "mode",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 68,
														Line:   64,
													},
													File:   "tickscript.flux",
													Source: "\"extend\"",
													Start: ast.Position{
														Column: 60,
														Line:   64,
													},
												},
											},
											Value: "extend",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   64,
										},
										File:   "tickscript.flux",
										Source: "experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
										Start: ast.Position{
											Column: 8,
											Line:   64,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   64,
											},
											File:   "tickscript.flux",
											Source: "experimental.group",
											Start: ast.Position{
												Column: 8,
												Line:   64,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   64,
												},
												File:   "tickscript.flux",
												Source: "experimental",
												Start: ast.Position{
													Column: 8,
													Line:   64,
												},
											},
										},
										Name: "experimental",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   64,
												},
												File:   "tickscript.flux",
												Source: "group",
												Start: ast.Position{
													Column: 21,
													Line:   64,
												},
											},
										},
										Name: "group",
									},
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   70,
								},
								File:   "tickscript.flux",
								Source: "_counts = union(tables: [_dummy, tables])\n    |> keep(columns: [\"_time\"])\n    |> map(fn: (r) => ({ r with __value__: 0 }))\n    |> count(column: \"__value__\")\n    |> findColumn(fn: (key) => true, column: \"__value__\")",
								Start: ast.Position{
									Column: 3,
									Line:   66,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   66,
									},
									File:   "tickscript.flux",
									Source: "_counts",
									Start: ast.Position{
										Column: 3,
										Line:   66,
									},
								},
							},
							Name: "_counts",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   66,
														},
														File:   "tickscript.flux",
														Source: "tables: [_dummy, tables]",
														Start: ast.Position{
															Column: 19,
															Line:   66,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   66,
															},
															File:   "tickscript.flux",
															Source: "tables: [_dummy, tables]",
															Start: ast.Position{
																Column: 19,
																Line:   66,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   66,
																},
																File:   "tickscript.flux",
																Source: "tables",
																Start: ast.Position{
																	Column: 19,
																	Line:   66,
																},
															},
														},
														Name: "tables",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   66,
																},
																File:   "tickscript.flux",
																Source: "[_dummy, tables]",
																Start: ast.Position{
																	Column: 27,
																	Line:   66,
																},
															},
														},
														Elements: []ast.Expression{&ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 34,
																		Line:   66,
																	},
																	File:   "tickscript.flux",
																	Source: "_dummy",
																	Start: ast.Position{
																		Column: 28,
																		Line:   66,
																	},
																},
															},
															Name: "_dummy",
														}, &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   66,
																	},
																	File:   "tickscript.flux",
																	Source: "tables",
																	Start: ast.Position{
																		Column: 36,
																		Line:   66,
																	},
																},
															},
															Name: "tables",
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   66,
													},
													File:   "tickscript.flux",
													Source: "union(tables: [_dummy, tables])",
													Start: ast.Position{
														Column: 13,
														Line:   66,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   66,
														},
														File:   "tickscript.flux",
														Source: "union",
														Start: ast.Position{
															Column: 13,
															Line:   66,
														},
													},
												},
												Name: "union",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   67,
												},
												File:   "tickscript.flux",
												Source: "union(tables: [_dummy, tables])\n    |> keep(columns: [\"_time\"])",
												Start: ast.Position{
													Column: 13,
													Line:   66,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   67,
														},
														File:   "tickscript.flux",
														Source: "columns: [\"_time\"]",
														Start: ast.Position{
															Column: 13,
															Line:   67,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   67,
															},
															File:   "tickscript.flux",
															Source: "columns: [\"_time\"]",
															Start: ast.Position{
																Column: 13,
																Line:   67,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 20,
																	Line:   67,
																},
																File:   "tickscript.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 13,
																	Line:   67,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   67,
																},
																File:   "tickscript.flux",
																Source: "[\"_time\"]",
																Start: ast.Position{
																	Column: 22,
																	Line:   67,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   67,
																	},
																	File:   "tickscript.flux",
																	Source: "\"_time\"",
																	Start: ast.Position{
																		Column: 23,
																		Line:   67,
																	},
																},
															},
															Value: "_time",
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   67,
													},
													File:   "tickscript.flux",
													Source: "keep(columns: [\"_time\"])",
													Start: ast.Position{
														Column: 8,
														Line:   67,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   67,
														},
														File:   "tickscript.flux",
														Source: "keep",
														Start: ast.Position{
															Column: 8,
															Line:   67,
														},
													},
												},
												Name: "keep",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   68,
											},
											File:   "tickscript.flux",
											Source: "union(tables: [_dummy, tables])\n    |> keep(columns: [\"_time\"])\n    |> map(fn: (r) => ({ r with __value__: 0 }))",
											Start: ast.Position{
												Column: 13,
												Line:   66,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   68,
													},
													File:   "tickscript.flux",
													Source: "fn: (r) => ({ r with __value__: 0 })",
													Start: ast.Position{
														Column: 12,
														Line:   68,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   68,
														},
														File:   "tickscript.flux",
														Source: "fn: (r) => ({ r with __value__: 0 })",
														Start: ast.Position{
															Column: 12,
															Line:   68,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   68,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 12,
																Line:   68,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   68,
															},
															File:   "tickscript.flux",
															Source: "(r) => ({ r with __value__: 0 })",
															Start: ast.Position{
																Column: 16,
																Line:   68,
															},
														},
													},
													Body: &ast.ParenExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 48,
																	Line:   68,
																},
																File:   "tickscript.flux",
																Source: "({ r with __value__: 0 })",
																Start: ast.Position{
																	Column: 23,
																	Line:   68,
																},
															},
														},
														Expression: &ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   68,
																	},
																	File:   "tickscript.flux",
																	Source: "{ r with __value__: 0 }",
																	Start: ast.Position{
																		Column: 24,
																		Line:   68,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 45,
																			Line:   68,
																		},
																		File:   "tickscript.flux",
																		Source: "__value__: 0",
																		Start: ast.Position{
																			Column: 33,
																			Line:   68,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 42,
																				Line:   68,
																			},
																			File:   "tickscript.flux",
																			Source: "__value__",
																			Start: ast.Position{
																				Column: 33,
																				Line:   68,
																			},
																		},
																	},
																	Name: "__value__",
																},
																Value: &ast.IntegerLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   68,
																			},
																			File:   "tickscript.flux",
																			Source: "0",
																			Start: ast.Position{
																				Column: 44,
																				Line:   68,
																			},
																		},
																	},
																	Value: int64(0),
																},
															}},
															With: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 27,
																			Line:   68,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 26,
																			Line:   68,
																		},
																	},
																},
																Name: "r",
															},
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   68,
																},
																File:   "tickscript.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   68,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   68,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   68,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   68,
												},
												File:   "tickscript.flux",
												Source: "map(fn: (r) => ({ r with __value__: 0 }))",
												Start: ast.Position{
													Column: 8,
													Line:   68,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   68,
													},
													File:   "tickscript.flux",
													Source: "map",
													Start: ast.Position{
														Column: 8,
														Line:   68,
													},
												},
											},
											Name: "map",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   69,
										},
										File:   "tickscript.flux",
										Source: "union(tables: [_dummy, tables])\n    |> keep(columns: [\"_time\"])\n    |> map(fn: (r) => ({ r with __value__: 0 }))\n    |> count(column: \"__value__\")",
										Start: ast.Position{
											Column: 13,
											Line:   66,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   69,
												},
												File:   "tickscript.flux",
												Source: "column: \"__value__\"",
												Start: ast.Position{
													Column: 14,
													Line:   69,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   69,
													},
													File:   "tickscript.flux",
													Source: "column: \"__value__\"",
													Start: ast.Position{
														Column: 14,
														Line:   69,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   69,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 14,
															Line:   69,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 33,
															Line:   69,
														},
														File:   "tickscript.flux",
														Source: "\"__value__\"",
														Start: ast.Position{
															Column: 22,
															Line:   69,
														},
													},
												},
												Value: "__value__",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   69,
											},
											File:   "tickscript.flux",
											Source: "count(column: \"__value__\")",
											Start: ast.Position{
												Column: 8,
												Line:   69,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   69,
												},
												File:   "tickscript.flux",
												Source: "count",
												Start: ast.Position{
													Column: 8,
													Line:   69,
												},
											},
										},
										Name: "count",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   70,
									},
									File:   "tickscript.flux",
									Source: "union(tables: [_dummy, tables])\n    |> keep(columns: [\"_time\"])\n    |> map(fn: (r) => ({ r with __value__: 0 }))\n    |> count(column: \"__value__\")\n    |> findColumn(fn: (key) => true, column: \"__value__\")",
									Start: ast.Position{
										Column: 13,
										Line:   66,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   70,
											},
											File:   "tickscript.flux",
											Source: "fn: (key) => true, column: \"__value__\"",
											Start: ast.Position{
												Column: 19,
												Line:   70,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   70,
												},
												File:   "tickscript.flux",
												Source: "fn: (key) => true",
												Start: ast.Position{
													Column: 19,
													Line:   70,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   70,
													},
													File:   "tickscript.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 19,
														Line:   70,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   70,
													},
													File:   "tickscript.flux",
													Source: "(key) => true",
													Start: ast.Position{
														Column: 23,
														Line:   70,
													},
												},
											},
											Body: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   70,
														},
														File:   "tickscript.flux",
														Source: "true",
														Start: ast.Position{
															Column: 32,
															Line:   70,
														},
													},
												},
												Name: "true",
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   70,
														},
														File:   "tickscript.flux",
														Source: "key",
														Start: ast.Position{
															Column: 24,
															Line:   70,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 27,
																Line:   70,
															},
															File:   "tickscript.flux",
															Source: "key",
															Start: ast.Position{
																Column: 24,
																Line:   70,
															},
														},
													},
													Name: "key",
												},
												Value: nil,
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   70,
												},
												File:   "tickscript.flux",
												Source: "column: \"__value__\"",
												Start: ast.Position{
													Column: 38,
													Line:   70,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   70,
													},
													File:   "tickscript.flux",
													Source: "column",
													Start: ast.Position{
														Column: 38,
														Line:   70,
													},
												},
											},
											Name: "column",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 57,
														Line:   70,
													},
													File:   "tickscript.flux",
													Source: "\"__value__\"",
													Start: ast.Position{
														Column: 46,
														Line:   70,
													},
												},
											},
											Value: "__value__",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   70,
										},
										File:   "tickscript.flux",
										Source: "findColumn(fn: (key) => true, column: \"__value__\")",
										Start: ast.Position{
											Column: 8,
											Line:   70,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   70,
											},
											File:   "tickscript.flux",
											Source: "findColumn",
											Start: ast.Position{
												Column: 8,
												Line:   70,
											},
										},
									},
									Name: "findColumn",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   77,
								},
								File:   "tickscript.flux",
								Source: "_tables =\n    if _counts[0] == 1 then // only dummy record is in the merged stream\n      _dummy\n        |> limit(n: 0) // need empty table\n    else\n      tables",
								Start: ast.Position{
									Column: 3,
									Line:   72,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   72,
									},
									File:   "tickscript.flux",
									Source: "_tables",
									Start: ast.Position{
										Column: 3,
										Line:   72,
									},
								},
							},
							Name: "_tables",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   77,
										},
										File:   "tickscript.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 7,
											Line:   77,
										},
									},
								},
								Name: "tables",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   77,
									},
									File:   "tickscript.flux",
									Source: "if _counts[0] == 1 then // only dummy record is in the merged stream\n      _dummy\n        |> limit(n: 0) // need empty table\n    else\n      tables",
									Start: ast.Position{
										Column: 5,
										Line:   73,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   74,
											},
											File:   "tickscript.flux",
											Source: "_dummy",
											Start: ast.Position{
												Column: 7,
												Line:   74,
											},
										},
									},
									Name: "_dummy",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   75,
										},
										File:   "tickscript.flux",
										Source: "_dummy\n        |> limit(n: 0)",
										Start: ast.Position{
											Column: 7,
											Line:   74,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   75,
												},
												File:   "tickscript.flux",
												Source: "n: 0",
												Start: ast.Position{
													Column: 18,
													Line:   75,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   75,
													},
													File:   "tickscript.flux",
													Source: "n: 0",
													Start: ast.Position{
														Column: 18,
														Line:   75,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   75,
														},
														File:   "tickscript.flux",
														Source: "n",
														Start: ast.Position{
															Column: 18,
															Line:   75,
														},
													},
												},
												Name: "n",
											},
											Value: &ast.IntegerLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   75,
														},
														File:   "tickscript.flux",
														Source: "0",
														Start: ast.Position{
															Column: 21,
															Line:   75,
														},
													},
												},
												Value: int64(0),
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   75,
											},
											File:   "tickscript.flux",
											Source: "limit(n: 0)",
											Start: ast.Position{
												Column: 12,
												Line:   75,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   75,
												},
												File:   "tickscript.flux",
												Source: "limit",
												Start: ast.Position{
													Column: 12,
													Line:   75,
												},
											},
										},
										Name: "limit",
									},
								},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   73,
										},
										File:   "tickscript.flux",
										Source: "_counts[0] == 1",
										Start: ast.Position{
											Column: 8,
											Line:   73,
										},
									},
								},
								Left: &ast.IndexExpression{
									Array: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   73,
												},
												File:   "tickscript.flux",
												Source: "_counts",
												Start: ast.Position{
													Column: 8,
													Line:   73,
												},
											},
										},
										Name: "_counts",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   73,
											},
											File:   "tickscript.flux",
											Source: "_counts[0]",
											Start: ast.Position{
												Column: 8,
												Line:   73,
											},
										},
									},
									Index: &ast.IntegerLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   73,
												},
												File:   "tickscript.flux",
												Source: "0",
												Start: ast.Position{
													Column: 16,
													Line:   73,
												},
											},
										},
										Value: int64(0),
									},
								},
								Operator: 17,
								Right: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   73,
											},
											File:   "tickscript.flux",
											Source: "1",
											Start: ast.Position{
												Column: 22,
												Line:   73,
											},
										},
									},
									Value: int64(1),
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   79,
															},
															File:   "tickscript.flux",
															Source: "_tables",
															Start: ast.Position{
																Column: 10,
																Line:   79,
															},
														},
													},
													Name: "_tables",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   80,
														},
														File:   "tickscript.flux",
														Source: "_tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")",
														Start: ast.Position{
															Column: 10,
															Line:   79,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 57,
																	Line:   80,
																},
																File:   "tickscript.flux",
																Source: "column: \"_measurement\", as: \"__value__\"",
																Start: ast.Position{
																	Column: 18,
																	Line:   80,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   80,
																	},
																	File:   "tickscript.flux",
																	Source: "column: \"_measurement\"",
																	Start: ast.Position{
																		Column: 18,
																		Line:   80,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   80,
																		},
																		File:   "tickscript.flux",
																		Source: "column",
																		Start: ast.Position{
																			Column: 18,
																			Line:   80,
																		},
																	},
																},
																Name: "column",
															},
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 40,
																			Line:   80,
																		},
																		File:   "tickscript.flux",
																		Source: "\"_measurement\"",
																		Start: ast.Position{
																			Column: 26,
																			Line:   80,
																		},
																	},
																},
																Value: "_measurement",
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 57,
																		Line:   80,
																	},
																	File:   "tickscript.flux",
																	Source: "as: \"__value__\"",
																	Start: ast.Position{
																		Column: 42,
																		Line:   80,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 44,
																			Line:   80,
																		},
																		File:   "tickscript.flux",
																		Source: "as",
																		Start: ast.Position{
																			Column: 42,
																			Line:   80,
																		},
																	},
																},
																Name: "as",
															},
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 57,
																			Line:   80,
																		},
																		File:   "tickscript.flux",
																		Source: "\"__value__\"",
																		Start: ast.Position{
																			Column: 46,
																			Line:   80,
																		},
																	},
																},
																Value: "__value__",
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 58,
																Line:   80,
															},
															File:   "tickscript.flux",
															Source: "duplicate(column: \"_measurement\", as: \"__value__\")",
															Start: ast.Position{
																Column: 8,
																Line:   80,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 17,
																	Line:   80,
																},
																File:   "tickscript.flux",
																Source: "duplicate",
																Start: ast.Position{
																	Column: 8,
																	Line:   80,
																},
															},
														},
														Name: "duplicate",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   81,
													},
													File:   "tickscript.flux",
													Source: "_tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")",
													Start: ast.Position{
														Column: 10,
														Line:   79,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   81,
															},
															File:   "tickscript.flux",
															Source: "column: \"__value__\"",
															Start: ast.Position{
																Column: 14,
																Line:   81,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   81,
																},
																File:   "tickscript.flux",
																Source: "column: \"__value__\"",
																Start: ast.Position{
																	Column: 14,
																	Line:   81,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 20,
																		Line:   81,
																	},
																	File:   "tickscript.flux",
																	Source: "column",
																	Start: ast.Position{
																		Column: 14,
																		Line:   81,
																	},
																},
															},
															Name: "column",
														},
														Value: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 33,
																		Line:   81,
																	},
																	File:   "tickscript.flux",
																	Source: "\"__value__\"",
																	Start: ast.Position{
																		Column: 22,
																		Line:   81,
																	},
																},
															},
															Value: "__value__",
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   81,
														},
														File:   "tickscript.flux",
														Source: "count(column: \"__value__\")",
														Start: ast.Position{
															Column: 8,
															Line:   81,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 13,
																Line:   81,
															},
															File:   "tickscript.flux",
															Source: "count",
															Start: ast.Position{
																Column: 8,
																Line:   81,
															},
														},
													},
													Name: "count",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   82,
												},
												File:   "tickscript.flux",
												Source: "_tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")\n    |> map(fn: (r) => ({r with _time: now()}))",
												Start: ast.Position{
													Column: 10,
													Line:   79,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   82,
														},
														File:   "tickscript.flux",
														Source: "fn: (r) => ({r with _time: now()})",
														Start: ast.Position{
															Column: 12,
															Line:   82,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   82,
															},
															File:   "tickscript.flux",
															Source: "fn: (r) => ({r with _time: now()})",
															Start: ast.Position{
																Column: 12,
																Line:   82,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 14,
																	Line:   82,
																},
																File:   "tickscript.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 12,
																	Line:   82,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   82,
																},
																File:   "tickscript.flux",
																Source: "(r) => ({r with _time: now()})",
																Start: ast.Position{
																	Column: 16,
																	Line:   82,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   82,
																	},
																	File:   "tickscript.flux",
																	Source: "({r with _time: now()})",
																	Start: ast.Position{
																		Column: 23,
																		Line:   82,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 45,
																			Line:   82,
																		},
																		File:   "tickscript.flux",
																		Source: "{r with _time: now()}",
																		Start: ast.Position{
																			Column: 24,
																			Line:   82,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 44,
																				Line:   82,
																			},
																			File:   "tickscript.flux",
																			Source: "_time: now()",
																			Start: ast.Position{
																				Column: 32,
																				Line:   82,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 37,
																					Line:   82,
																				},
																				File:   "tickscript.flux",
																				Source: "_time",
																				Start: ast.Position{
																					Column: 32,
																					Line:   82,
																				},
																			},
																		},
																		Name: "_time",
																	},
																	Value: &ast.CallExpression{
																		Arguments: nil,
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 44,
																					Line:   82,
																				},
																				File:   "tickscript.flux",
																				Source: "now()",
																				Start: ast.Position{
																					Column: 39,
																					Line:   82,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 42,
																						Line:   82,
																					},
																					File:   "tickscript.flux",
																					Source: "now",
																					Start: ast.Position{
																						Column: 39,
																						Line:   82,
																					},
																				},
																			},
																			Name: "now",
																		},
																	},
																}},
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 26,
																				Line:   82,
																			},
																			File:   "tickscript.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 25,
																				Line:   82,
																			},
																		},
																	},
																	Name: "r",
																},
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   82,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   82,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   82,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   82,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   82,
													},
													File:   "tickscript.flux",
													Source: "map(fn: (r) => ({r with _time: now()}))",
													Start: ast.Position{
														Column: 8,
														Line:   82,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   82,
														},
														File:   "tickscript.flux",
														Source: "map",
														Start: ast.Position{
															Column: 8,
															Line:   82,
														},
													},
												},
												Name: "map",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   83,
											},
											File:   "tickscript.flux",
											Source: "_tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")\n    |> map(fn: (r) => ({r with _time: now()}))                   // recreate _time column after aggregation\n    |> map(fn: (r) => ({r with dead: r.__value__ <= threshold}))",
											Start: ast.Position{
												Column: 10,
												Line:   79,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 64,
														Line:   83,
													},
													File:   "tickscript.flux",
													Source: "fn: (r) => ({r with dead: r.__value__ <= threshold})",
													Start: ast.Position{
														Column: 12,
														Line:   83,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 64,
															Line:   83,
														},
														File:   "tickscript.flux",
														Source: "fn: (r) => ({r with dead: r.__value__ <= threshold})",
														Start: ast.Position{
															Column: 12,
															Line:   83,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   83,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 12,
																Line:   83,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 64,
																Line:   83,
															},
															File:   "tickscript.flux",
															Source: "(r) => ({r with dead: r.__value__ <= threshold})",
															Start: ast.Position{
																Column: 16,
																Line:   83,
															},
														},
													},
													Body: &ast.ParenExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 64,
																	Line:   83,
																},
																File:   "tickscript.flux",
																Source: "({r with dead: r.__value__ <= threshold})",
																Start: ast.Position{
																	Column: 23,
																	Line:   83,
																},
															},
														},
														Expression: &ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 63,
																		Line:   83,
																	},
																	File:   "tickscript.flux",
																	Source: "{r with dead: r.__value__ <= threshold}",
																	Start: ast.Position{
																		Column: 24,
																		Line:   83,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 62,
																			Line:   83,
																		},
																		File:   "tickscript.flux",
																		Source: "dead: r.__value__ <= threshold",
																		Start: ast.Position{
																			Column: 32,
																			Line:   83,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 36,
																				Line:   83,
																			},
																			File:   "tickscript.flux",
																			Source: "dead",
																			Start: ast.Position{
																				Column: 32,
																				Line:   83,
																			},
																		},
																	},
																	Name: "dead",
																},
																Value: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 62,
																				Line:   83,
																			},
																			File:   "tickscript.flux",
																			Source: "r.__value__ <= threshold",
																			Start: ast.Position{
																				Column: 38,
																				Line:   83,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 49,
																					Line:   83,
																				},
																				File:   "tickscript.flux",
																				Source: "r.__value__",
																				Start: ast.Position{
																					Column: 38,
																					Line:   83,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 39,
																						Line:   83,
																					},
																					File:   "tickscript.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 38,
																						Line:   83,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 49,
																						Line:   83,
																					},
																					File:   "tickscript.flux",
																					Source: "__value__",
																					Start: ast.Position{
																						Column: 40,
																						Line:   83,
																					},
																				},
																			},
																			Name: "__value__",
																		},
																	},
																	Operator: 7,
																	Right: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 62,
																					Line:   83,
																				},
																				File:   "tickscript.flux",
																				Source: "threshold",
																				Start: ast.Position{
																					Column: 53,
																					Line:   83,
																				},
																			},
																		},
																		Name: "threshold",
																	},
																},
															}},
															With: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 26,
																			Line:   83,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 25,
																			Line:   83,
																		},
																	},
																},
																Name: "r",
															},
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   83,
																},
																File:   "tickscript.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   83,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   83,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   83,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   83,
												},
												File:   "tickscript.flux",
												Source: "map(fn: (r) => ({r with dead: r.__value__ <= threshold}))",
												Start: ast.Position{
													Column: 8,
													Line:   83,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   83,
													},
													File:   "tickscript.flux",
													Source: "map",
													Start: ast.Position{
														Column: 8,
														Line:   83,
													},
												},
											},
											Name: "map",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   84,
										},
										File:   "tickscript.flux",
										Source: "_tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")\n    |> map(fn: (r) => ({r with _time: now()}))                   // recreate _time column after aggregation\n    |> map(fn: (r) => ({r with dead: r.__value__ <= threshold})) // same tag that monitor.deadman() adds\n    |> drop(columns: [\"__value__\"])",
										Start: ast.Position{
											Column: 10,
											Line:   79,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   84,
												},
												File:   "tickscript.flux",
												Source: "columns: [\"__value__\"]",
												Start: ast.Position{
													Column: 13,
													Line:   84,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   84,
													},
													File:   "tickscript.flux",
													Source: "columns: [\"__value__\"]",
													Start: ast.Position{
														Column: 13,
														Line:   84,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   84,
														},
														File:   "tickscript.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 13,
															Line:   84,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   84,
														},
														File:   "tickscript.flux",
														Source: "[\"__value__\"]",
														Start: ast.Position{
															Column: 22,
															Line:   84,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   84,
															},
															File:   "tickscript.flux",
															Source: "\"__value__\"",
															Start: ast.Position{
																Column: 23,
																Line:   84,
															},
														},
													},
													Value: "__value__",
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   84,
											},
											File:   "tickscript.flux",
											Source: "drop(columns: [\"__value__\"])",
											Start: ast.Position{
												Column: 8,
												Line:   84,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   84,
												},
												File:   "tickscript.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 8,
													Line:   84,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   91,
									},
									File:   "tickscript.flux",
									Source: "_tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")\n    |> map(fn: (r) => ({r with _time: now()}))                   // recreate _time column after aggregation\n    |> map(fn: (r) => ({r with dead: r.__value__ <= threshold})) // same tag that monitor.deadman() adds\n    |> drop(columns: [\"__value__\"])\n    |> alert(\n      check: check,\n      id: id,\n      message: message,\n      crit: (r) => r.dead,\n      topic: topic\n    )",
									Start: ast.Position{
										Column: 10,
										Line:   79,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   90,
											},
											File:   "tickscript.flux",
											Source: "check: check,\n      id: id,\n      message: message,\n      crit: (r) => r.dead,\n      topic: topic",
											Start: ast.Position{
												Column: 7,
												Line:   86,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   86,
												},
												File:   "tickscript.flux",
												Source: "check: check",
												Start: ast.Position{
													Column: 7,
													Line:   86,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 12,
														Line:   86,
													},
													File:   "tickscript.flux",
													Source: "check",
													Start: ast.Position{
														Column: 7,
														Line:   86,
													},
												},
											},
											Name: "check",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   86,
													},
													File:   "tickscript.flux",
													Source: "check",
													Start: ast.Position{
														Column: 14,
														Line:   86,
													},
												},
											},
											Name: "check",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   87,
												},
												File:   "tickscript.flux",
												Source: "id: id",
												Start: ast.Position{
													Column: 7,
													Line:   87,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 9,
														Line:   87,
													},
													File:   "tickscript.flux",
													Source: "id",
													Start: ast.Position{
														Column: 7,
														Line:   87,
													},
												},
											},
											Name: "id",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   87,
													},
													File:   "tickscript.flux",
													Source: "id",
													Start: ast.Position{
														Column: 11,
														Line:   87,
													},
												},
											},
											Name: "id",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   88,
												},
												File:   "tickscript.flux",
												Source: "message: message",
												Start: ast.Position{
													Column: 7,
													Line:   88,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   88,
													},
													File:   "tickscript.flux",
													Source: "message",
													Start: ast.Position{
														Column: 7,
														Line:   88,
													},
												},
											},
											Name: "message",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   88,
													},
													File:   "tickscript.flux",
													Source: "message",
													Start: ast.Position{
														Column: 16,
														Line:   88,
													},
												},
											},
											Name: "message",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   89,
												},
												File:   "tickscript.flux",
												Source: "crit: (r) => r.dead",
												Start: ast.Position{
													Column: 7,
													Line:   89,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   89,
													},
													File:   "tickscript.flux",
													Source: "crit",
													Start: ast.Position{
														Column: 7,
														Line:   89,
													},
												},
											},
											Name: "crit",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   89,
													},
													File:   "tickscript.flux",
													Source: "(r) => r.dead",
													Start: ast.Position{
														Column: 13,
														Line:   89,
													},
												},
											},
											Body: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   89,
														},
														File:   "tickscript.flux",
														Source: "r.dead",
														Start: ast.Position{
															Column: 20,
															Line:   89,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   89,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 20,
																Line:   89,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 26,
																Line:   89,
															},
															File:   "tickscript.flux",
															Source: "dead",
															Start: ast.Position{
																Column: 22,
																Line:   89,
															},
														},
													},
													Name: "dead",
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   89,
														},
														File:   "tickscript.flux",
														Source: "r",
														Start: ast.Position{
															Column: 14,
															Line:   89,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   89,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 14,
																Line:   89,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   90,
												},
												File:   "tickscript.flux",
												Source: "topic: topic",
												Start: ast.Position{
													Column: 7,
													Line:   90,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 12,
														Line:   90,
													},
													File:   "tickscript.flux",
													Source: "topic",
													Start: ast.Position{
														Column: 7,
														Line:   90,
													},
												},
											},
											Name: "topic",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   90,
													},
													File:   "tickscript.flux",
													Source: "topic",
													Start: ast.Position{
														Column: 14,
														Line:   90,
													},
												},
											},
											Name: "topic",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   91,
										},
										File:   "tickscript.flux",
										Source: "alert(\n      check: check,\n      id: id,\n      message: message,\n      crit: (r) => r.dead,\n      topic: topic\n    )",
										Start: ast.Position{
											Column: 8,
											Line:   85,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   85,
											},
											File:   "tickscript.flux",
											Source: "alert",
											Start: ast.Position{
												Column: 8,
												Line:   85,
											},
										},
									},
									Name: "alert",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   91,
								},
								File:   "tickscript.flux",
								Source: "return _tables\n    |> duplicate(column: \"_measurement\", as: \"__value__\")        // _measurement column is always present\n    |> count(column: \"__value__\")\n    |> map(fn: (r) => ({r with _time: now()}))                   // recreate _time column after aggregation\n    |> map(fn: (r) => ({r with dead: r.__value__ <= threshold})) // same tag that monitor.deadman() adds\n    |> drop(columns: [\"__value__\"])\n    |> alert(\n      check: check,\n      id: id,\n      message: message,\n      crit: (r) => r.dead,\n      topic: topic\n    )",
								Start: ast.Position{
									Column: 3,
									Line:   79,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   52,
							},
							File:   "tickscript.flux",
							Source: "check",
							Start: ast.Position{
								Column: 5,
								Line:   52,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "check",
								Start: ast.Position{
									Column: 5,
									Line:   52,
								},
							},
						},
						Name: "check",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   53,
							},
							File:   "tickscript.flux",
							Source: "measurement",
							Start: ast.Position{
								Column: 5,
								Line:   53,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   53,
								},
								File:   "tickscript.flux",
								Source: "measurement",
								Start: ast.Position{
									Column: 5,
									Line:   53,
								},
							},
						},
						Name: "measurement",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   53,
							},
							File:   "tickscript.flux",
							Source: "threshold=0",
							Start: ast.Position{
								Column: 18,
								Line:   53,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   53,
								},
								File:   "tickscript.flux",
								Source: "threshold",
								Start: ast.Position{
									Column: 18,
									Line:   53,
								},
							},
						},
						Name: "threshold",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   53,
								},
								File:   "tickscript.flux",
								Source: "0",
								Start: ast.Position{
									Column: 28,
									Line:   53,
								},
							},
						},
						Value: int64(0),
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   54,
							},
							File:   "tickscript.flux",
							Source: "id=(r)=>\"${r._check_id}\"",
							Start: ast.Position{
								Column: 5,
								Line:   54,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 7,
									Line:   54,
								},
								File:   "tickscript.flux",
								Source: "id",
								Start: ast.Position{
									Column: 5,
									Line:   54,
								},
							},
						},
						Name: "id",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   54,
								},
								File:   "tickscript.flux",
								Source: "(r)=>\"${r._check_id}\"",
								Start: ast.Position{
									Column: 8,
									Line:   54,
								},
							},
						},
						Body: &ast.StringExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   54,
									},
									File:   "tickscript.flux",
									Source: "\"${r._check_id}\"",
									Start: ast.Position{
										Column: 13,
										Line:   54,
									},
								},
							},
							Parts: []ast.StringExpressionPart{&ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   54,
										},
										File:   "tickscript.flux",
										Source: "${r._check_id}",
										Start: ast.Position{
											Column: 14,
											Line:   54,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   54,
											},
											File:   "tickscript.flux",
											Source: "r._check_id",
											Start: ast.Position{
												Column: 16,
												Line:   54,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   54,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 16,
													Line:   54,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   54,
												},
												File:   "tickscript.flux",
												Source: "_check_id",
												Start: ast.Position{
													Column: 18,
													Line:   54,
												},
											},
										},
										Name: "_check_id",
									},
								},
							}},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   54,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 9,
										Line:   54,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   54,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 9,
											Line:   54,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 95,
								Line:   55,
							},
							File:   "tickscript.flux",
							Source: "message=(r)=>\"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\")",
							Start: ast.Position{
								Column: 5,
								Line:   55,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   55,
								},
								File:   "tickscript.flux",
								Source: "message",
								Start: ast.Position{
									Column: 5,
									Line:   55,
								},
							},
						},
						Name: "message",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 95,
									Line:   55,
								},
								File:   "tickscript.flux",
								Source: "(r)=>\"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\")",
								Start: ast.Position{
									Column: 13,
									Line:   55,
								},
							},
						},
						Body: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   55,
									},
									File:   "tickscript.flux",
									Source: "\"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\")",
									Start: ast.Position{
										Column: 18,
										Line:   55,
									},
								},
							},
							Left: &ast.StringExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   55,
										},
										File:   "tickscript.flux",
										Source: "\"Deadman Check: ${r._check_name} is: \"",
										Start: ast.Position{
											Column: 18,
											Line:   55,
										},
									},
								},
								Parts: []ast.StringExpressionPart{&ast.TextPart{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   55,
											},
											File:   "tickscript.flux",
											Source: "Deadman Check: ",
											Start: ast.Position{
												Column: 19,
												Line:   55,
											},
										},
									},
									Value: "Deadman Check: ",
								}, &ast.InterpolatedPart{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   55,
											},
											File:   "tickscript.flux",
											Source: "${r._check_name}",
											Start: ast.Position{
												Column: 34,
												Line:   55,
											},
										},
									},
									Expression: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   55,
												},
												File:   "tickscript.flux",
												Source: "r._check_name",
												Start: ast.Position{
													Column: 36,
													Line:   55,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   55,
													},
													File:   "tickscript.flux",
													Source: "r",
													Start: ast.Position{
														Column: 36,
														Line:   55,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   55,
													},
													File:   "tickscript.flux",
													Source: "_check_name",
													Start: ast.Position{
														Column: 38,
														Line:   55,
													},
												},
											},
											Name: "_check_name",
										},
									},
								}, &ast.TextPart{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   55,
											},
											File:   "tickscript.flux",
											Source: " is: ",
											Start: ast.Position{
												Column: 50,
												Line:   55,
											},
										},
									},
									Value: " is: ",
								}},
							},
							Operator: 5,
							Right: &ast.ParenExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 95,
											Line:   55,
										},
										File:   "tickscript.flux",
										Source: "(if r.dead then \"dead\" else \"alive\")",
										Start: ast.Position{
											Column: 59,
											Line:   55,
										},
									},
								},
								Expression: &ast.ConditionalExpression{
									Alternate: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 94,
													Line:   55,
												},
												File:   "tickscript.flux",
												Source: "\"alive\"",
												Start: ast.Position{
													Column: 87,
													Line:   55,
												},
											},
										},
										Value: "alive",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 94,
												Line:   55,
											},
											File:   "tickscript.flux",
											Source: "if r.dead then \"dead\" else \"alive\"",
											Start: ast.Position{
												Column: 60,
												Line:   55,
											},
										},
									},
									Consequent: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 81,
													Line:   55,
												},
												File:   "tickscript.flux",
												Source: "\"dead\"",
												Start: ast.Position{
													Column: 75,
													Line:   55,
												},
											},
										},
										Value: "dead",
									},
									Test: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   55,
												},
												File:   "tickscript.flux",
												Source: "r.dead",
												Start: ast.Position{
													Column: 63,
													Line:   55,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 64,
														Line:   55,
													},
													File:   "tickscript.flux",
													Source: "r",
													Start: ast.Position{
														Column: 63,
														Line:   55,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   55,
													},
													File:   "tickscript.flux",
													Source: "dead",
													Start: ast.Position{
														Column: 65,
														Line:   55,
													},
												},
											},
											Name: "dead",
										},
									},
								},
							},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   55,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 14,
										Line:   55,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   55,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 14,
											Line:   55,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   56,
							},
							File:   "tickscript.flux",
							Source: "topic=\"\"",
							Start: ast.Position{
								Column: 5,
								Line:   56,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   56,
								},
								File:   "tickscript.flux",
								Source: "topic",
								Start: ast.Position{
									Column: 5,
									Line:   56,
								},
							},
						},
						Name: "topic",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   56,
								},
								File:   "tickscript.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 11,
									Line:   56,
								},
							},
						},
						Value: "",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   57,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 5,
								Line:   57,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   57,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   57,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   57,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 12,
								Line:   57,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   107,
					},
					File:   "tickscript.flux",
					Source: "select = (column=\"_value\", fn=(column, tables=<-) => tables, as, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   100,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   100,
						},
						File:   "tickscript.flux",
						Source: "select",
						Start: ast.Position{
							Column: 1,
							Line:   100,
						},
					},
				},
				Name: "select",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   107,
						},
						File:   "tickscript.flux",
						Source: "(column=\"_value\", fn=(column, tables=<-) => tables, as, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
						Start: ast.Position{
							Column: 10,
							Line:   100,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   107,
							},
							File:   "tickscript.flux",
							Source: "{\n  _column = column\n  _as = as\n  return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
							Start: ast.Position{
								Column: 80,
								Line:   100,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   101,
								},
								File:   "tickscript.flux",
								Source: "_column = column",
								Start: ast.Position{
									Column: 3,
									Line:   101,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   101,
									},
									File:   "tickscript.flux",
									Source: "_column",
									Start: ast.Position{
										Column: 3,
										Line:   101,
									},
								},
							},
							Name: "_column",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   101,
									},
									File:   "tickscript.flux",
									Source: "column",
									Start: ast.Position{
										Column: 13,
										Line:   101,
									},
								},
							},
							Name: "column",
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   102,
								},
								File:   "tickscript.flux",
								Source: "_as = as",
								Start: ast.Position{
									Column: 3,
									Line:   102,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   102,
									},
									File:   "tickscript.flux",
									Source: "_as",
									Start: ast.Position{
										Column: 3,
										Line:   102,
									},
								},
							},
							Name: "_as",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   102,
									},
									File:   "tickscript.flux",
									Source: "as",
									Start: ast.Position{
										Column: 9,
										Line:   102,
									},
								},
							},
							Name: "as",
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   104,
											},
											File:   "tickscript.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 5,
												Line:   104,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   105,
										},
										File:   "tickscript.flux",
										Source: "tables\n      |> fn(column: _column)",
										Start: ast.Position{
											Column: 5,
											Line:   104,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   105,
												},
												File:   "tickscript.flux",
												Source: "column: _column",
												Start: ast.Position{
													Column: 13,
													Line:   105,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   105,
													},
													File:   "tickscript.flux",
													Source: "column: _column",
													Start: ast.Position{
														Column: 13,
														Line:   105,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   105,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 13,
															Line:   105,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   105,
														},
														File:   "tickscript.flux",
														Source: "_column",
														Start: ast.Position{
															Column: 21,
															Line:   105,
														},
													},
												},
												Name: "_column",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   105,
											},
											File:   "tickscript.flux",
											Source: "fn(column: _column)",
											Start: ast.Position{
												Column: 10,
												Line:   105,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   105,
												},
												File:   "tickscript.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   105,
												},
											},
										},
										Name: "fn",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   106,
									},
									File:   "tickscript.flux",
									Source: "tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)",
									Start: ast.Position{
										Column: 5,
										Line:   104,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   106,
											},
											File:   "tickscript.flux",
											Source: "fn: (column) => if column == _column then _as else column",
											Start: ast.Position{
												Column: 17,
												Line:   106,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   106,
												},
												File:   "tickscript.flux",
												Source: "fn: (column) => if column == _column then _as else column",
												Start: ast.Position{
													Column: 17,
													Line:   106,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   106,
													},
													File:   "tickscript.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 17,
														Line:   106,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   106,
													},
													File:   "tickscript.flux",
													Source: "(column) => if column == _column then _as else column",
													Start: ast.Position{
														Column: 21,
														Line:   106,
													},
												},
											},
											Body: &ast.ConditionalExpression{
												Alternate: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 74,
																Line:   106,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 68,
																Line:   106,
															},
														},
													},
													Name: "column",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 74,
															Line:   106,
														},
														File:   "tickscript.flux",
														Source: "if column == _column then _as else column",
														Start: ast.Position{
															Column: 33,
															Line:   106,
														},
													},
												},
												Consequent: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 62,
																Line:   106,
															},
															File:   "tickscript.flux",
															Source: "_as",
															Start: ast.Position{
																Column: 59,
																Line:   106,
															},
														},
													},
													Name: "_as",
												},
												Test: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   106,
															},
															File:   "tickscript.flux",
															Source: "column == _column",
															Start: ast.Position{
																Column: 36,
																Line:   106,
															},
														},
													},
													Left: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   106,
																},
																File:   "tickscript.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 36,
																	Line:   106,
																},
															},
														},
														Name: "column",
													},
													Operator: 17,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   106,
																},
																File:   "tickscript.flux",
																Source: "_column",
																Start: ast.Position{
																	Column: 46,
																	Line:   106,
																},
															},
														},
														Name: "_column",
													},
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   106,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 22,
															Line:   106,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   106,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   106,
															},
														},
													},
													Name: "column",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   106,
										},
										File:   "tickscript.flux",
										Source: "rename(fn: (column) => if column == _column then _as else column)",
										Start: ast.Position{
											Column: 10,
											Line:   106,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   106,
											},
											File:   "tickscript.flux",
											Source: "rename",
											Start: ast.Position{
												Column: 10,
												Line:   106,
											},
										},
									},
									Name: "rename",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   106,
								},
								File:   "tickscript.flux",
								Source: "return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)",
								Start: ast.Position{
									Column: 3,
									Line:   103,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   100,
							},
							File:   "tickscript.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 11,
								Line:   100,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   100,
								},
								File:   "tickscript.flux",
								Source: "column",
								Start: ast.Position{
									Column: 11,
									Line:   100,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   100,
								},
								File:   "tickscript.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 18,
									Line:   100,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 60,
								Line:   100,
							},
							File:   "tickscript.flux",
							Source: "fn=(column, tables=<-) => tables",
							Start: ast.Position{
								Column: 28,
								Line:   100,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   100,
								},
								File:   "tickscript.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   100,
								},
							},
						},
						Name: "fn",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   100,
								},
								File:   "tickscript.flux",
								Source: "(column, tables=<-) => tables",
								Start: ast.Position{
									Column: 31,
									Line:   100,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   100,
									},
									File:   "tickscript.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 54,
										Line:   100,
									},
								},
							},
							Name: "tables",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   100,
									},
									File:   "tickscript.flux",
									Source: "column",
									Start: ast.Position{
										Column: 32,
										Line:   100,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   100,
										},
										File:   "tickscript.flux",
										Source: "column",
										Start: ast.Position{
											Column: 32,
											Line:   100,
										},
									},
								},
								Name: "column",
							},
							Value: nil,
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   100,
									},
									File:   "tickscript.flux",
									Source: "tables=<-",
									Start: ast.Position{
										Column: 40,
										Line:   100,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   100,
										},
										File:   "tickscript.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 40,
											Line:   100,
										},
									},
								},
								Name: "tables",
							},
							Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   100,
									},
									File:   "tickscript.flux",
									Source: "<-",
									Start: ast.Position{
										Column: 47,
										Line:   100,
									},
								},
							}},
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   100,
							},
							File:   "tickscript.flux",
							Source: "as",
							Start: ast.Position{
								Column: 62,
								Line:   100,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   100,
								},
								File:   "tickscript.flux",
								Source: "as",
								Start: ast.Position{
									Column: 62,
									Line:   100,
								},
							},
						},
						Name: "as",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   100,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 66,
								Line:   100,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   100,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 66,
									Line:   100,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   100,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 73,
								Line:   100,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   123,
					},
					File:   "tickscript.flux",
					Source: "selectWindow = (column=\"_value\", fn, as, every, defaultValue, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   115,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   115,
						},
						File:   "tickscript.flux",
						Source: "selectWindow",
						Start: ast.Position{
							Column: 1,
							Line:   115,
						},
					},
				},
				Name: "selectWindow",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   123,
						},
						File:   "tickscript.flux",
						Source: "(column=\"_value\", fn, as, every, defaultValue, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
						Start: ast.Position{
							Column: 16,
							Line:   115,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   123,
							},
							File:   "tickscript.flux",
							Source: "{\n  _column = column\n  _as = as\n  return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
							Start: ast.Position{
								Column: 77,
								Line:   115,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   116,
								},
								File:   "tickscript.flux",
								Source: "_column = column",
								Start: ast.Position{
									Column: 3,
									Line:   116,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   116,
									},
									File:   "tickscript.flux",
									Source: "_column",
									Start: ast.Position{
										Column: 3,
										Line:   116,
									},
								},
							},
							Name: "_column",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   116,
									},
									File:   "tickscript.flux",
									Source: "column",
									Start: ast.Position{
										Column: 13,
										Line:   116,
									},
								},
							},
							Name: "column",
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   117,
								},
								File:   "tickscript.flux",
								Source: "_as = as",
								Start: ast.Position{
									Column: 3,
									Line:   117,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   117,
									},
									File:   "tickscript.flux",
									Source: "_as",
									Start: ast.Position{
										Column: 3,
										Line:   117,
									},
								},
							},
							Name: "_as",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   117,
									},
									File:   "tickscript.flux",
									Source: "as",
									Start: ast.Position{
										Column: 9,
										Line:   117,
									},
								},
							},
							Name: "as",
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   119,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 5,
													Line:   119,
												},
											},
										},
										Name: "tables",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 83,
												Line:   120,
											},
											File:   "tickscript.flux",
											Source: "tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)",
											Start: ast.Position{
												Column: 5,
												Line:   119,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 82,
														Line:   120,
													},
													File:   "tickscript.flux",
													Source: "every: every, fn: fn, column: _column, createEmpty: true",
													Start: ast.Position{
														Column: 26,
														Line:   120,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   120,
														},
														File:   "tickscript.flux",
														Source: "every: every",
														Start: ast.Position{
															Column: 26,
															Line:   120,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   120,
															},
															File:   "tickscript.flux",
															Source: "every",
															Start: ast.Position{
																Column: 26,
																Line:   120,
															},
														},
													},
													Name: "every",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   120,
															},
															File:   "tickscript.flux",
															Source: "every",
															Start: ast.Position{
																Column: 33,
																Line:   120,
															},
														},
													},
													Name: "every",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   120,
														},
														File:   "tickscript.flux",
														Source: "fn: fn",
														Start: ast.Position{
															Column: 40,
															Line:   120,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   120,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 40,
																Line:   120,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   120,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 44,
																Line:   120,
															},
														},
													},
													Name: "fn",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 63,
															Line:   120,
														},
														File:   "tickscript.flux",
														Source: "column: _column",
														Start: ast.Position{
															Column: 48,
															Line:   120,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   120,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 48,
																Line:   120,
															},
														},
													},
													Name: "column",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 63,
																Line:   120,
															},
															File:   "tickscript.flux",
															Source: "_column",
															Start: ast.Position{
																Column: 56,
																Line:   120,
															},
														},
													},
													Name: "_column",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 82,
															Line:   120,
														},
														File:   "tickscript.flux",
														Source: "createEmpty: true",
														Start: ast.Position{
															Column: 65,
															Line:   120,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 76,
																Line:   120,
															},
															File:   "tickscript.flux",
															Source: "createEmpty",
															Start: ast.Position{
																Column: 65,
																Line:   120,
															},
														},
													},
													Name: "createEmpty",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 82,
																Line:   120,
															},
															File:   "tickscript.flux",
															Source: "true",
															Start: ast.Position{
																Column: 78,
																Line:   120,
															},
														},
													},
													Name: "true",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   120,
												},
												File:   "tickscript.flux",
												Source: "aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)",
												Start: ast.Position{
													Column: 10,
													Line:   120,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   120,
													},
													File:   "tickscript.flux",
													Source: "aggregateWindow",
													Start: ast.Position{
														Column: 10,
														Line:   120,
													},
												},
											},
											Name: "aggregateWindow",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   121,
										},
										File:   "tickscript.flux",
										Source: "tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)",
										Start: ast.Position{
											Column: 5,
											Line:   119,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   121,
												},
												File:   "tickscript.flux",
												Source: "column: _column, value: defaultValue",
												Start: ast.Position{
													Column: 15,
													Line:   121,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   121,
													},
													File:   "tickscript.flux",
													Source: "column: _column",
													Start: ast.Position{
														Column: 15,
														Line:   121,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   121,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 15,
															Line:   121,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   121,
														},
														File:   "tickscript.flux",
														Source: "_column",
														Start: ast.Position{
															Column: 23,
															Line:   121,
														},
													},
												},
												Name: "_column",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   121,
													},
													File:   "tickscript.flux",
													Source: "value: defaultValue",
													Start: ast.Position{
														Column: 32,
														Line:   121,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   121,
														},
														File:   "tickscript.flux",
														Source: "value",
														Start: ast.Position{
															Column: 32,
															Line:   121,
														},
													},
												},
												Name: "value",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   121,
														},
														File:   "tickscript.flux",
														Source: "defaultValue",
														Start: ast.Position{
															Column: 39,
															Line:   121,
														},
													},
												},
												Name: "defaultValue",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   121,
											},
											File:   "tickscript.flux",
											Source: "fill(column: _column, value: defaultValue)",
											Start: ast.Position{
												Column: 10,
												Line:   121,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   121,
												},
												File:   "tickscript.flux",
												Source: "fill",
												Start: ast.Position{
													Column: 10,
													Line:   121,
												},
											},
										},
										Name: "fill",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   122,
									},
									File:   "tickscript.flux",
									Source: "tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)",
									Start: ast.Position{
										Column: 5,
										Line:   119,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   122,
											},
											File:   "tickscript.flux",
											Source: "fn: (column) => if column == _column then _as else column",
											Start: ast.Position{
												Column: 17,
												Line:   122,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   122,
												},
												File:   "tickscript.flux",
												Source: "fn: (column) => if column == _column then _as else column",
												Start: ast.Position{
													Column: 17,
													Line:   122,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   122,
													},
													File:   "tickscript.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 17,
														Line:   122,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   122,
													},
													File:   "tickscript.flux",
													Source: "(column) => if column == _column then _as else column",
													Start: ast.Position{
														Column: 21,
														Line:   122,
													},
												},
											},
											Body: &ast.ConditionalExpression{
												Alternate: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 74,
																Line:   122,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 68,
																Line:   122,
															},
														},
													},
													Name: "column",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 74,
															Line:   122,
														},
														File:   "tickscript.flux",
														Source: "if column == _column then _as else column",
														Start: ast.Position{
															Column: 33,
															Line:   122,
														},
													},
												},
												Consequent: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 62,
																Line:   122,
															},
															File:   "tickscript.flux",
															Source: "_as",
															Start: ast.Position{
																Column: 59,
																Line:   122,
															},
														},
													},
													Name: "_as",
												},
												Test: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   122,
															},
															File:   "tickscript.flux",
															Source: "column == _column",
															Start: ast.Position{
																Column: 36,
																Line:   122,
															},
														},
													},
													Left: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   122,
																},
																File:   "tickscript.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 36,
																	Line:   122,
																},
															},
														},
														Name: "column",
													},
													Operator: 17,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   122,
																},
																File:   "tickscript.flux",
																Source: "_column",
																Start: ast.Position{
																	Column: 46,
																	Line:   122,
																},
															},
														},
														Name: "_column",
													},
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   122,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 22,
															Line:   122,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   122,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   122,
															},
														},
													},
													Name: "column",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   122,
										},
										File:   "tickscript.flux",
										Source: "rename(fn: (column) => if column == _column then _as else column)",
										Start: ast.Position{
											Column: 10,
											Line:   122,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   122,
											},
											File:   "tickscript.flux",
											Source: "rename",
											Start: ast.Position{
												Column: 10,
												Line:   122,
											},
										},
									},
									Name: "rename",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   122,
								},
								File:   "tickscript.flux",
								Source: "return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)",
								Start: ast.Position{
									Column: 3,
									Line:   118,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   115,
							},
							File:   "tickscript.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 17,
								Line:   115,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   115,
								},
								File:   "tickscript.flux",
								Source: "column",
								Start: ast.Position{
									Column: 17,
									Line:   115,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   115,
								},
								File:   "tickscript.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 24,
									Line:   115,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   115,
							},
							File:   "tickscript.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 34,
								Line:   115,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   115,
								},
								File:   "tickscript.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 34,
									Line:   115,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   115,
							},
							File:   "tickscript.flux",
							Source: "as",
							Start: ast.Position{
								Column: 38,
								Line:   115,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   115,
								},
								File:   "tickscript.flux",
								Source: "as",
								Start: ast.Position{
									Column: 38,
									Line:   115,
								},
							},
						},
						Name: "as",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   115,
							},
							File:   "tickscript.flux",
							Source: "every",
							Start: ast.Position{
								Column: 42,
								Line:   115,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   115,
								},
								File:   "tickscript.flux",
								Source: "every",
								Start: ast.Position{
									Column: 42,
									Line:   115,
								},
							},
						},
						Name: "every",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 61,
								Line:   115,
							},
							File:   "tickscript.flux",
							Source: "defaultValue",
							Start: ast.Position{
								Column: 49,
								Line:   115,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   115,
								},
								File:   "tickscript.flux",
								Source: "defaultValue",
								Start: ast.Position{
									Column: 49,
									Line:   115,
								},
							},
						},
						Name: "defaultValue",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   115,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 63,
								Line:   115,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   115,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 63,
									Line:   115,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   115,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 70,
								Line:   115,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   131,
					},
					File:   "tickscript.flux",
					Source: "compute = select",
					Start: ast.Position{
						Column: 1,
						Line:   131,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   131,
						},
						File:   "tickscript.flux",
						Source: "compute",
						Start: ast.Position{
							Column: 1,
							Line:   131,
						},
					},
				},
				Name: "compute",
			},
			Init: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   131,
						},
						File:   "tickscript.flux",
						Source: "select",
						Start: ast.Position{
							Column: 11,
							Line:   131,
						},
					},
				},
				Name: "select",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   138,
					},
					File:   "tickscript.flux",
					Source: "groupBy = (columns, tables=<-) =>\n  tables\n    |> group(columns: columns)\n    |> experimental.group(columns: [\"_measurement\"], mode:\"extend\")",
					Start: ast.Position{
						Column: 1,
						Line:   135,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   135,
						},
						File:   "tickscript.flux",
						Source: "groupBy",
						Start: ast.Position{
							Column: 1,
							Line:   135,
						},
					},
				},
				Name: "groupBy",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   138,
						},
						File:   "tickscript.flux",
						Source: "(columns, tables=<-) =>\n  tables\n    |> group(columns: columns)\n    |> experimental.group(columns: [\"_measurement\"], mode:\"extend\")",
						Start: ast.Position{
							Column: 11,
							Line:   135,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   136,
									},
									File:   "tickscript.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 3,
										Line:   136,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   137,
								},
								File:   "tickscript.flux",
								Source: "tables\n    |> group(columns: columns)",
								Start: ast.Position{
									Column: 3,
									Line:   136,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   137,
										},
										File:   "tickscript.flux",
										Source: "columns: columns",
										Start: ast.Position{
											Column: 14,
											Line:   137,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   137,
											},
											File:   "tickscript.flux",
											Source: "columns: columns",
											Start: ast.Position{
												Column: 14,
												Line:   137,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   137,
												},
												File:   "tickscript.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 14,
													Line:   137,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   137,
												},
												File:   "tickscript.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 23,
													Line:   137,
												},
											},
										},
										Name: "columns",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   137,
									},
									File:   "tickscript.flux",
									Source: "group(columns: columns)",
									Start: ast.Position{
										Column: 8,
										Line:   137,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   137,
										},
										File:   "tickscript.flux",
										Source: "group",
										Start: ast.Position{
											Column: 8,
											Line:   137,
										},
									},
								},
								Name: "group",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   138,
							},
							File:   "tickscript.flux",
							Source: "tables\n    |> group(columns: columns)\n    |> experimental.group(columns: [\"_measurement\"], mode:\"extend\")",
							Start: ast.Position{
								Column: 3,
								Line:   136,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   138,
									},
									File:   "tickscript.flux",
									Source: "columns: [\"_measurement\"], mode:\"extend\"",
									Start: ast.Position{
										Column: 27,
										Line:   138,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   138,
										},
										File:   "tickscript.flux",
										Source: "columns: [\"_measurement\"]",
										Start: ast.Position{
											Column: 27,
											Line:   138,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   138,
											},
											File:   "tickscript.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 27,
												Line:   138,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   138,
											},
											File:   "tickscript.flux",
											Source: "[\"_measurement\"]",
											Start: ast.Position{
												Column: 36,
												Line:   138,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   138,
												},
												File:   "tickscript.flux",
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 37,
													Line:   138,
												},
											},
										},
										Value: "_measurement",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   138,
										},
										File:   "tickscript.flux",
										Source: "mode:\"extend\"",
										Start: ast.Position{
											Column: 54,
											Line:   138,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   138,
											},
											File:   "tickscript.flux",
											Source: "mode",
											Start: ast.Position{
												Column: 54,
												Line:   138,
											},
										},
									},
									Name: "mode",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   138,
											},
											File:   "tickscript.flux",
											Source: "\"extend\"",
											Start: ast.Position{
												Column: 59,
												Line:   138,
											},
										},
									},
									Value: "extend",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   138,
								},
								File:   "tickscript.flux",
								Source: "experimental.group(columns: [\"_measurement\"], mode:\"extend\")",
								Start: ast.Position{
									Column: 8,
									Line:   138,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   138,
									},
									File:   "tickscript.flux",
									Source: "experimental.group",
									Start: ast.Position{
										Column: 8,
										Line:   138,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   138,
										},
										File:   "tickscript.flux",
										Source: "experimental",
										Start: ast.Position{
											Column: 8,
											Line:   138,
										},
									},
								},
								Name: "experimental",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   138,
										},
										File:   "tickscript.flux",
										Source: "group",
										Start: ast.Position{
											Column: 21,
											Line:   138,
										},
									},
								},
								Name: "group",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   135,
							},
							File:   "tickscript.flux",
							Source: "columns",
							Start: ast.Position{
								Column: 12,
								Line:   135,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   135,
								},
								File:   "tickscript.flux",
								Source: "columns",
								Start: ast.Position{
									Column: 12,
									Line:   135,
								},
							},
						},
						Name: "columns",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   135,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 21,
								Line:   135,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   135,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 21,
									Line:   135,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   135,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   135,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 71,
						Line:   145,
					},
					File:   "tickscript.flux",
					Source: "join = (tables, on=[\"_time\"], measurement) =>\n    universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))\n      |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
					Start: ast.Position{
						Column: 1,
						Line:   142,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   142,
						},
						File:   "tickscript.flux",
						Source: "join",
						Start: ast.Position{
							Column: 1,
							Line:   142,
						},
					},
				},
				Name: "join",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 71,
							Line:   145,
						},
						File:   "tickscript.flux",
						Source: "(tables, on=[\"_time\"], measurement) =>\n    universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))\n      |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
						Start: ast.Position{
							Column: 8,
							Line:   142,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   143,
										},
										File:   "tickscript.flux",
										Source: "tables: tables, on: on",
										Start: ast.Position{
											Column: 19,
											Line:   143,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   143,
											},
											File:   "tickscript.flux",
											Source: "tables: tables",
											Start: ast.Position{
												Column: 19,
												Line:   143,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   143,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 19,
													Line:   143,
												},
											},
										},
										Name: "tables",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   143,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 27,
													Line:   143,
												},
											},
										},
										Name: "tables",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   143,
											},
											File:   "tickscript.flux",
											Source: "on: on",
											Start: ast.Position{
												Column: 35,
												Line:   143,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   143,
												},
												File:   "tickscript.flux",
												Source: "on",
												Start: ast.Position{
													Column: 35,
													Line:   143,
												},
											},
										},
										Name: "on",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   143,
												},
												File:   "tickscript.flux",
												Source: "on",
												Start: ast.Position{
													Column: 39,
													Line:   143,
												},
											},
										},
										Name: "on",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   143,
									},
									File:   "tickscript.flux",
									Source: "universe.join(tables: tables, on: on)",
									Start: ast.Position{
										Column: 5,
										Line:   143,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   143,
										},
										File:   "tickscript.flux",
										Source: "universe.join",
										Start: ast.Position{
											Column: 5,
											Line:   143,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   143,
											},
											File:   "tickscript.flux",
											Source: "universe",
											Start: ast.Position{
												Column: 5,
												Line:   143,
											},
										},
									},
									Name: "universe",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   143,
											},
											File:   "tickscript.flux",
											Source: "join",
											Start: ast.Position{
												Column: 14,
												Line:   143,
											},
										},
									},
									Name: "join",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   144,
								},
								File:   "tickscript.flux",
								Source: "universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))",
								Start: ast.Position{
									Column: 5,
									Line:   143,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   144,
										},
										File:   "tickscript.flux",
										Source: "fn: (r) => ({ r with _measurement: measurement })",
										Start: ast.Position{
											Column: 14,
											Line:   144,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   144,
											},
											File:   "tickscript.flux",
											Source: "fn: (r) => ({ r with _measurement: measurement })",
											Start: ast.Position{
												Column: 14,
												Line:   144,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   144,
												},
												File:   "tickscript.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 14,
													Line:   144,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   144,
												},
												File:   "tickscript.flux",
												Source: "(r) => ({ r with _measurement: measurement })",
												Start: ast.Position{
													Column: 18,
													Line:   144,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 63,
														Line:   144,
													},
													File:   "tickscript.flux",
													Source: "({ r with _measurement: measurement })",
													Start: ast.Position{
														Column: 25,
														Line:   144,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   144,
														},
														File:   "tickscript.flux",
														Source: "{ r with _measurement: measurement }",
														Start: ast.Position{
															Column: 26,
															Line:   144,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   144,
															},
															File:   "tickscript.flux",
															Source: "_measurement: measurement",
															Start: ast.Position{
																Column: 35,
																Line:   144,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   144,
																},
																File:   "tickscript.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 35,
																	Line:   144,
																},
															},
														},
														Name: "_measurement",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   144,
																},
																File:   "tickscript.flux",
																Source: "measurement",
																Start: ast.Position{
																	Column: 49,
																	Line:   144,
																},
															},
														},
														Name: "measurement",
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   144,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 28,
																Line:   144,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   144,
													},
													File:   "tickscript.flux",
													Source: "r",
													Start: ast.Position{
														Column: 19,
														Line:   144,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   144,
														},
														File:   "tickscript.flux",
														Source: "r",
														Start: ast.Position{
															Column: 19,
															Line:   144,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   144,
									},
									File:   "tickscript.flux",
									Source: "map(fn: (r) => ({ r with _measurement: measurement }))",
									Start: ast.Position{
										Column: 10,
										Line:   144,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   144,
										},
										File:   "tickscript.flux",
										Source: "map",
										Start: ast.Position{
											Column: 10,
											Line:   144,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   145,
							},
							File:   "tickscript.flux",
							Source: "universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))\n      |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
							Start: ast.Position{
								Column: 5,
								Line:   143,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   145,
									},
									File:   "tickscript.flux",
									Source: "columns: [\"_measurement\"], mode: \"extend\"",
									Start: ast.Position{
										Column: 29,
										Line:   145,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   145,
										},
										File:   "tickscript.flux",
										Source: "columns: [\"_measurement\"]",
										Start: ast.Position{
											Column: 29,
											Line:   145,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   145,
											},
											File:   "tickscript.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 29,
												Line:   145,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   145,
											},
											File:   "tickscript.flux",
											Source: "[\"_measurement\"]",
											Start: ast.Position{
												Column: 38,
												Line:   145,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   145,
												},
												File:   "tickscript.flux",
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 39,
													Line:   145,
												},
											},
										},
										Value: "_measurement",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   145,
										},
										File:   "tickscript.flux",
										Source: "mode: \"extend\"",
										Start: ast.Position{
											Column: 56,
											Line:   145,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   145,
											},
											File:   "tickscript.flux",
											Source: "mode",
											Start: ast.Position{
												Column: 56,
												Line:   145,
											},
										},
									},
									Name: "mode",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   145,
											},
											File:   "tickscript.flux",
											Source: "\"extend\"",
											Start: ast.Position{
												Column: 62,
												Line:   145,
											},
										},
									},
									Value: "extend",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   145,
								},
								File:   "tickscript.flux",
								Source: "experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
								Start: ast.Position{
									Column: 10,
									Line:   145,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   145,
									},
									File:   "tickscript.flux",
									Source: "experimental.group",
									Start: ast.Position{
										Column: 10,
										Line:   145,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   145,
										},
										File:   "tickscript.flux",
										Source: "experimental",
										Start: ast.Position{
											Column: 10,
											Line:   145,
										},
									},
								},
								Name: "experimental",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   145,
										},
										File:   "tickscript.flux",
										Source: "group",
										Start: ast.Position{
											Column: 23,
											Line:   145,
										},
									},
								},
								Name: "group",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   142,
							},
							File:   "tickscript.flux",
							Source: "tables",
							Start: ast.Position{
								Column: 9,
								Line:   142,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   142,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 9,
									Line:   142,
								},
							},
						},
						Name: "tables",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   142,
							},
							File:   "tickscript.flux",
							Source: "on=[\"_time\"]",
							Start: ast.Position{
								Column: 17,
								Line:   142,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   142,
								},
								File:   "tickscript.flux",
								Source: "on",
								Start: ast.Position{
									Column: 17,
									Line:   142,
								},
							},
						},
						Name: "on",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   142,
								},
								File:   "tickscript.flux",
								Source: "[\"_time\"]",
								Start: ast.Position{
									Column: 20,
									Line:   142,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   142,
									},
									File:   "tickscript.flux",
									Source: "\"_time\"",
									Start: ast.Position{
										Column: 21,
										Line:   142,
									},
								},
							},
							Value: "_time",
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   142,
							},
							File:   "tickscript.flux",
							Source: "measurement",
							Start: ast.Position{
								Column: 31,
								Line:   142,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   142,
								},
								File:   "tickscript.flux",
								Source: "measurement",
								Start: ast.Position{
									Column: 31,
									Line:   142,
								},
							},
						},
						Name: "measurement",
					},
					Value: nil,
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   3,
					},
					File:   "tickscript.flux",
					Source: "import \"experimental\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   3,
						},
						File:   "tickscript.flux",
						Source: "\"experimental\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "experimental",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 28,
						Line:   4,
					},
					File:   "tickscript.flux",
					Source: "import \"experimental/array\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   4,
						},
						File:   "tickscript.flux",
						Source: "\"experimental/array\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "experimental/array",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   5,
					},
					File:   "tickscript.flux",
					Source: "import \"influxdata/influxdb\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   5,
						},
						File:   "tickscript.flux",
						Source: "\"influxdata/influxdb\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "influxdata/influxdb",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 37,
						Line:   6,
					},
					File:   "tickscript.flux",
					Source: "import \"influxdata/influxdb/monitor\"",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 37,
							Line:   6,
						},
						File:   "tickscript.flux",
						Source: "\"influxdata/influxdb/monitor\"",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				Value: "influxdata/influxdb/monitor",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 36,
						Line:   7,
					},
					File:   "tickscript.flux",
					Source: "import \"influxdata/influxdb/schema\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   7,
						},
						File:   "tickscript.flux",
						Source: "\"influxdata/influxdb/schema\"",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				Value: "influxdata/influxdb/schema",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   8,
					},
					File:   "tickscript.flux",
					Source: "import \"universe\"",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   8,
						},
						File:   "tickscript.flux",
						Source: "\"universe\"",
						Start: ast.Position{
							Column: 8,
							Line:   8,
						},
					},
				},
				Value: "universe",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "tickscript.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   1,
					},
					File:   "tickscript.flux",
					Source: "package tickscript",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   1,
						},
						File:   "tickscript.flux",
						Source: "tickscript",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "tickscript",
			},
		},
	}},
	Package: "tickscript",
	Path:    "contrib/bonitoo-io/tickscript",
}
