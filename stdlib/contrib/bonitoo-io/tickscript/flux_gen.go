// DO NOT EDIT: This file is autogenerated via the builtin command.

package tickscript

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
	"regexp"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 71,
					Line:   95,
				},
				File:   "tickscript.flux",
				Source: "package tickscript\n\nimport \"experimental\"\nimport \"influxdata/influxdb\"\nimport \"influxdata/influxdb/monitor\"\nimport \"influxdata/influxdb/schema\"\nimport \"universe\"\n\n// alert\nalert = (\n    check,\n    id=(r)=>\"${r._check_id}\",\n    message=(r)=>\"Check: ${r._check_name} is: ${r._level}\",\n    details=(r)=>\"\",\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true,\n    tables=<-) =>\n  tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )\n\n// routes alerts to topic\ntopic = (name, tables=<-) =>\n  tables\n    |> set(key: \"_topic\", value: name )\n    |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    |> monitor.write()\n\n//\n// TICKscript -> Flux helper functions\n//\n\n// selects a column and optionally computes aggregated value\n// it is meant to be a convenience function to be used for:\n//\n//   query(\"SELECT x AS y\")\n//   query(\"SELECT f(x) AS y\") without time grouping\n//\nselect = (column=\"_value\", fn=(column, tables=<-) => tables, as, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}\n\n// selects column with time grouping and computes aggregated values\n// it is meant to be a convenience function to be used for:\n//\n//   query(\"SELECT f(x) AS y\")\n//     .groupBy(time(t), ...)\n//\nselectWindow = (column=\"_value\", fn, as, every, defaultValue, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}\n\n// computes aggregated value of tha data\n// it is meant to be a convenience function to be used for:\n//\n//   |median('x)'\n//      .as(y)\n//\ncompute = select\n\n// groups by specified columns\n// it is meant to be a convenience function, it adds _measurement column which is required by monitor.check() (in alert())\ngroupBy = (columns, tables=<-) =>\n  tables\n    |> group(columns: columns)\n    |> experimental.group(columns: [\"_measurement\"], mode:\"extend\") // required by monitor.check\n\n// joins the streams using standard join()\n// it is meant to be a convenience function, it ensures _measurement column exists and also removes some useless columns\njoin = (tables, on=[\"_time\"], measurement) =>\n    universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))\n      |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 6,
						Line:   31,
					},
					File:   "tickscript.flux",
					Source: "alert = (\n    check,\n    id=(r)=>\"${r._check_id}\",\n    message=(r)=>\"Check: ${r._check_name} is: ${r._level}\",\n    details=(r)=>\"\",\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true,\n    tables=<-) =>\n  tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   10,
						},
						File:   "tickscript.flux",
						Source: "alert",
						Start: ast.Position{
							Column: 1,
							Line:   10,
						},
					},
				},
				Name: "alert",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   31,
						},
						File:   "tickscript.flux",
						Source: "(\n    check,\n    id=(r)=>\"${r._check_id}\",\n    message=(r)=>\"Check: ${r._check_name} is: ${r._level}\",\n    details=(r)=>\"\",\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true,\n    tables=<-) =>\n  tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )",
						Start: ast.Position{
							Column: 9,
							Line:   10,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 9,
												Line:   20,
											},
											File:   "tickscript.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 3,
												Line:   20,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 73,
											Line:   21,
										},
										File:   "tickscript.flux",
										Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)",
										Start: ast.Position{
											Column: 3,
											Line:   20,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   21,
												},
												File:   "tickscript.flux",
												Source: "fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/",
												Start: ast.Position{
													Column: 13,
													Line:   21,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 72,
														Line:   21,
													},
													File:   "tickscript.flux",
													Source: "fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/",
													Start: ast.Position{
														Column: 13,
														Line:   21,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   21,
														},
														File:   "tickscript.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 13,
															Line:   21,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 72,
															Line:   21,
														},
														File:   "tickscript.flux",
														Source: "(column) => column =~ /_start.*/ or column =~ /_stop.*/",
														Start: ast.Position{
															Column: 17,
															Line:   21,
														},
													},
												},
												Body: &ast.LogicalExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 72,
																Line:   21,
															},
															File:   "tickscript.flux",
															Source: "column =~ /_start.*/ or column =~ /_stop.*/",
															Start: ast.Position{
																Column: 29,
																Line:   21,
															},
														},
													},
													Left: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   21,
																},
																File:   "tickscript.flux",
																Source: "column =~ /_start.*/",
																Start: ast.Position{
																	Column: 29,
																	Line:   21,
																},
															},
														},
														Left: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 35,
																		Line:   21,
																	},
																	File:   "tickscript.flux",
																	Source: "column",
																	Start: ast.Position{
																		Column: 29,
																		Line:   21,
																	},
																},
															},
															Name: "column",
														},
														Operator: 19,
														Right: &ast.RegexpLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 49,
																		Line:   21,
																	},
																	File:   "tickscript.flux",
																	Source: "/_start.*/",
																	Start: ast.Position{
																		Column: 39,
																		Line:   21,
																	},
																},
															},
															Value: regexp.MustCompile("_start.*"),
														},
													},
													Operator: 2,
													Right: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 72,
																	Line:   21,
																},
																File:   "tickscript.flux",
																Source: "column =~ /_stop.*/",
																Start: ast.Position{
																	Column: 53,
																	Line:   21,
																},
															},
														},
														Left: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   21,
																	},
																	File:   "tickscript.flux",
																	Source: "column",
																	Start: ast.Position{
																		Column: 53,
																		Line:   21,
																	},
																},
															},
															Name: "column",
														},
														Operator: 19,
														Right: &ast.RegexpLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 72,
																		Line:   21,
																	},
																	File:   "tickscript.flux",
																	Source: "/_stop.*/",
																	Start: ast.Position{
																		Column: 63,
																		Line:   21,
																	},
																},
															},
															Value: regexp.MustCompile("_stop.*"),
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   21,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 18,
																Line:   21,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 24,
																	Line:   21,
																},
																File:   "tickscript.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 18,
																	Line:   21,
																},
															},
														},
														Name: "column",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 73,
												Line:   21,
											},
											File:   "tickscript.flux",
											Source: "drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)",
											Start: ast.Position{
												Column: 8,
												Line:   21,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   21,
												},
												File:   "tickscript.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 8,
													Line:   21,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({ r with id: id(r: r) }))",
									Start: ast.Position{
										Column: 3,
										Line:   20,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   22,
											},
											File:   "tickscript.flux",
											Source: "fn: (r) => ({ r with id: id(r: r) })",
											Start: ast.Position{
												Column: 12,
												Line:   22,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   22,
												},
												File:   "tickscript.flux",
												Source: "fn: (r) => ({ r with id: id(r: r) })",
												Start: ast.Position{
													Column: 12,
													Line:   22,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   22,
													},
													File:   "tickscript.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 12,
														Line:   22,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   22,
													},
													File:   "tickscript.flux",
													Source: "(r) => ({ r with id: id(r: r) })",
													Start: ast.Position{
														Column: 16,
														Line:   22,
													},
												},
											},
											Body: &ast.ParenExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   22,
														},
														File:   "tickscript.flux",
														Source: "({ r with id: id(r: r) })",
														Start: ast.Position{
															Column: 23,
															Line:   22,
														},
													},
												},
												Expression: &ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   22,
															},
															File:   "tickscript.flux",
															Source: "{ r with id: id(r: r) }",
															Start: ast.Position{
																Column: 24,
																Line:   22,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 45,
																	Line:   22,
																},
																File:   "tickscript.flux",
																Source: "id: id(r: r)",
																Start: ast.Position{
																	Column: 33,
																	Line:   22,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 35,
																		Line:   22,
																	},
																	File:   "tickscript.flux",
																	Source: "id",
																	Start: ast.Position{
																		Column: 33,
																		Line:   22,
																	},
																},
															},
															Name: "id",
														},
														Value: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 44,
																			Line:   22,
																		},
																		File:   "tickscript.flux",
																		Source: "r: r",
																		Start: ast.Position{
																			Column: 40,
																			Line:   22,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 44,
																				Line:   22,
																			},
																			File:   "tickscript.flux",
																			Source: "r: r",
																			Start: ast.Position{
																				Column: 40,
																				Line:   22,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 41,
																					Line:   22,
																				},
																				File:   "tickscript.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 40,
																					Line:   22,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 44,
																					Line:   22,
																				},
																				File:   "tickscript.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 43,
																					Line:   22,
																				},
																			},
																		},
																		Name: "r",
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 45,
																		Line:   22,
																	},
																	File:   "tickscript.flux",
																	Source: "id(r: r)",
																	Start: ast.Position{
																		Column: 37,
																		Line:   22,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 39,
																			Line:   22,
																		},
																		File:   "tickscript.flux",
																		Source: "id",
																		Start: ast.Position{
																			Column: 37,
																			Line:   22,
																		},
																	},
																},
																Name: "id",
															},
														},
													}},
													With: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 27,
																	Line:   22,
																},
																File:   "tickscript.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 26,
																	Line:   22,
																},
															},
														},
														Name: "r",
													},
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   22,
														},
														File:   "tickscript.flux",
														Source: "r",
														Start: ast.Position{
															Column: 17,
															Line:   22,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   22,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 17,
																Line:   22,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "map(fn: (r) => ({ r with id: id(r: r) }))",
										Start: ast.Position{
											Column: 8,
											Line:   22,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   22,
											},
											File:   "tickscript.flux",
											Source: "map",
											Start: ast.Position{
												Column: 8,
												Line:   22,
											},
										},
									},
									Name: "map",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   23,
								},
								File:   "tickscript.flux",
								Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))",
								Start: ast.Position{
									Column: 3,
									Line:   20,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   23,
										},
										File:   "tickscript.flux",
										Source: "fn: (r) => ({ r with details: details(r: r) })",
										Start: ast.Position{
											Column: 12,
											Line:   23,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   23,
											},
											File:   "tickscript.flux",
											Source: "fn: (r) => ({ r with details: details(r: r) })",
											Start: ast.Position{
												Column: 12,
												Line:   23,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   23,
												},
												File:   "tickscript.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 12,
													Line:   23,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   23,
												},
												File:   "tickscript.flux",
												Source: "(r) => ({ r with details: details(r: r) })",
												Start: ast.Position{
													Column: 16,
													Line:   23,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   23,
													},
													File:   "tickscript.flux",
													Source: "({ r with details: details(r: r) })",
													Start: ast.Position{
														Column: 23,
														Line:   23,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 57,
															Line:   23,
														},
														File:   "tickscript.flux",
														Source: "{ r with details: details(r: r) }",
														Start: ast.Position{
															Column: 24,
															Line:   23,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   23,
															},
															File:   "tickscript.flux",
															Source: "details: details(r: r)",
															Start: ast.Position{
																Column: 33,
																Line:   23,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   23,
																},
																File:   "tickscript.flux",
																Source: "details",
																Start: ast.Position{
																	Column: 33,
																	Line:   23,
																},
															},
														},
														Name: "details",
													},
													Value: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 54,
																		Line:   23,
																	},
																	File:   "tickscript.flux",
																	Source: "r: r",
																	Start: ast.Position{
																		Column: 50,
																		Line:   23,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 54,
																			Line:   23,
																		},
																		File:   "tickscript.flux",
																		Source: "r: r",
																		Start: ast.Position{
																			Column: 50,
																			Line:   23,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 51,
																				Line:   23,
																			},
																			File:   "tickscript.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 50,
																				Line:   23,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 54,
																				Line:   23,
																			},
																			File:   "tickscript.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 53,
																				Line:   23,
																			},
																		},
																	},
																	Name: "r",
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   23,
																},
																File:   "tickscript.flux",
																Source: "details(r: r)",
																Start: ast.Position{
																	Column: 42,
																	Line:   23,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 49,
																		Line:   23,
																	},
																	File:   "tickscript.flux",
																	Source: "details",
																	Start: ast.Position{
																		Column: 42,
																		Line:   23,
																	},
																},
															},
															Name: "details",
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 27,
																Line:   23,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 26,
																Line:   23,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   23,
													},
													File:   "tickscript.flux",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   23,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   23,
														},
														File:   "tickscript.flux",
														Source: "r",
														Start: ast.Position{
															Column: 17,
															Line:   23,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   23,
									},
									File:   "tickscript.flux",
									Source: "map(fn: (r) => ({ r with details: details(r: r) }))",
									Start: ast.Position{
										Column: 8,
										Line:   23,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   23,
										},
										File:   "tickscript.flux",
										Source: "map",
										Start: ast.Position{
											Column: 8,
											Line:   23,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 6,
								Line:   31,
							},
							File:   "tickscript.flux",
							Source: "tables\n    |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n    |> map(fn: (r) => ({ r with id: id(r: r) }))\n    |> map(fn: (r) => ({ r with details: details(r: r) }))\n    |> monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )",
							Start: ast.Position{
								Column: 3,
								Line:   20,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   30,
									},
									File:   "tickscript.flux",
									Source: "crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check",
									Start: ast.Position{
										Column: 9,
										Line:   25,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   25,
										},
										File:   "tickscript.flux",
										Source: "crit: crit",
										Start: ast.Position{
											Column: 9,
											Line:   25,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   25,
											},
											File:   "tickscript.flux",
											Source: "crit",
											Start: ast.Position{
												Column: 9,
												Line:   25,
											},
										},
									},
									Name: "crit",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   25,
											},
											File:   "tickscript.flux",
											Source: "crit",
											Start: ast.Position{
												Column: 15,
												Line:   25,
											},
										},
									},
									Name: "crit",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   26,
										},
										File:   "tickscript.flux",
										Source: "warn: warn",
										Start: ast.Position{
											Column: 9,
											Line:   26,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   26,
											},
											File:   "tickscript.flux",
											Source: "warn",
											Start: ast.Position{
												Column: 9,
												Line:   26,
											},
										},
									},
									Name: "warn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   26,
											},
											File:   "tickscript.flux",
											Source: "warn",
											Start: ast.Position{
												Column: 15,
												Line:   26,
											},
										},
									},
									Name: "warn",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   27,
										},
										File:   "tickscript.flux",
										Source: "info: info",
										Start: ast.Position{
											Column: 9,
											Line:   27,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   27,
											},
											File:   "tickscript.flux",
											Source: "info",
											Start: ast.Position{
												Column: 9,
												Line:   27,
											},
										},
									},
									Name: "info",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   27,
											},
											File:   "tickscript.flux",
											Source: "info",
											Start: ast.Position{
												Column: 15,
												Line:   27,
											},
										},
									},
									Name: "info",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   28,
										},
										File:   "tickscript.flux",
										Source: "ok: ok",
										Start: ast.Position{
											Column: 9,
											Line:   28,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   28,
											},
											File:   "tickscript.flux",
											Source: "ok",
											Start: ast.Position{
												Column: 9,
												Line:   28,
											},
										},
									},
									Name: "ok",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   28,
											},
											File:   "tickscript.flux",
											Source: "ok",
											Start: ast.Position{
												Column: 13,
												Line:   28,
											},
										},
									},
									Name: "ok",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   29,
										},
										File:   "tickscript.flux",
										Source: "messageFn: message",
										Start: ast.Position{
											Column: 9,
											Line:   29,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   29,
											},
											File:   "tickscript.flux",
											Source: "messageFn",
											Start: ast.Position{
												Column: 9,
												Line:   29,
											},
										},
									},
									Name: "messageFn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   29,
											},
											File:   "tickscript.flux",
											Source: "message",
											Start: ast.Position{
												Column: 20,
												Line:   29,
											},
										},
									},
									Name: "message",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   30,
										},
										File:   "tickscript.flux",
										Source: "data: check",
										Start: ast.Position{
											Column: 9,
											Line:   30,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   30,
											},
											File:   "tickscript.flux",
											Source: "data",
											Start: ast.Position{
												Column: 9,
												Line:   30,
											},
										},
									},
									Name: "data",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   30,
											},
											File:   "tickscript.flux",
											Source: "check",
											Start: ast.Position{
												Column: 15,
												Line:   30,
											},
										},
									},
									Name: "check",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   31,
								},
								File:   "tickscript.flux",
								Source: "monitor.check(\n        crit: crit,\n        warn: warn,\n        info: info,\n        ok: ok,\n        messageFn: message,\n        data: check\n    )",
								Start: ast.Position{
									Column: 8,
									Line:   24,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   24,
									},
									File:   "tickscript.flux",
									Source: "monitor.check",
									Start: ast.Position{
										Column: 8,
										Line:   24,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   24,
										},
										File:   "tickscript.flux",
										Source: "monitor",
										Start: ast.Position{
											Column: 8,
											Line:   24,
										},
									},
								},
								Name: "monitor",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   24,
										},
										File:   "tickscript.flux",
										Source: "check",
										Start: ast.Position{
											Column: 16,
											Line:   24,
										},
									},
								},
								Name: "check",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   11,
							},
							File:   "tickscript.flux",
							Source: "check",
							Start: ast.Position{
								Column: 5,
								Line:   11,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   11,
								},
								File:   "tickscript.flux",
								Source: "check",
								Start: ast.Position{
									Column: 5,
									Line:   11,
								},
							},
						},
						Name: "check",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   12,
							},
							File:   "tickscript.flux",
							Source: "id=(r)=>\"${r._check_id}\"",
							Start: ast.Position{
								Column: 5,
								Line:   12,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 7,
									Line:   12,
								},
								File:   "tickscript.flux",
								Source: "id",
								Start: ast.Position{
									Column: 5,
									Line:   12,
								},
							},
						},
						Name: "id",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   12,
								},
								File:   "tickscript.flux",
								Source: "(r)=>\"${r._check_id}\"",
								Start: ast.Position{
									Column: 8,
									Line:   12,
								},
							},
						},
						Body: &ast.StringExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   12,
									},
									File:   "tickscript.flux",
									Source: "\"${r._check_id}\"",
									Start: ast.Position{
										Column: 13,
										Line:   12,
									},
								},
							},
							Parts: []ast.StringExpressionPart{&ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   12,
										},
										File:   "tickscript.flux",
										Source: "${r._check_id}",
										Start: ast.Position{
											Column: 14,
											Line:   12,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   12,
											},
											File:   "tickscript.flux",
											Source: "r._check_id",
											Start: ast.Position{
												Column: 16,
												Line:   12,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   12,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 16,
													Line:   12,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   12,
												},
												File:   "tickscript.flux",
												Source: "_check_id",
												Start: ast.Position{
													Column: 18,
													Line:   12,
												},
											},
										},
										Name: "_check_id",
									},
								},
							}},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   12,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 9,
										Line:   12,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   12,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 9,
											Line:   12,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   13,
							},
							File:   "tickscript.flux",
							Source: "message=(r)=>\"Check: ${r._check_name} is: ${r._level}\"",
							Start: ast.Position{
								Column: 5,
								Line:   13,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   13,
								},
								File:   "tickscript.flux",
								Source: "message",
								Start: ast.Position{
									Column: 5,
									Line:   13,
								},
							},
						},
						Name: "message",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   13,
								},
								File:   "tickscript.flux",
								Source: "(r)=>\"Check: ${r._check_name} is: ${r._level}\"",
								Start: ast.Position{
									Column: 13,
									Line:   13,
								},
							},
						},
						Body: &ast.StringExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   13,
									},
									File:   "tickscript.flux",
									Source: "\"Check: ${r._check_name} is: ${r._level}\"",
									Start: ast.Position{
										Column: 18,
										Line:   13,
									},
								},
							},
							Parts: []ast.StringExpressionPart{&ast.TextPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   13,
										},
										File:   "tickscript.flux",
										Source: "Check: ",
										Start: ast.Position{
											Column: 19,
											Line:   13,
										},
									},
								},
								Value: "Check: ",
							}, &ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   13,
										},
										File:   "tickscript.flux",
										Source: "${r._check_name}",
										Start: ast.Position{
											Column: 26,
											Line:   13,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   13,
											},
											File:   "tickscript.flux",
											Source: "r._check_name",
											Start: ast.Position{
												Column: 28,
												Line:   13,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   13,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 28,
													Line:   13,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   13,
												},
												File:   "tickscript.flux",
												Source: "_check_name",
												Start: ast.Position{
													Column: 30,
													Line:   13,
												},
											},
										},
										Name: "_check_name",
									},
								},
							}, &ast.TextPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   13,
										},
										File:   "tickscript.flux",
										Source: " is: ",
										Start: ast.Position{
											Column: 42,
											Line:   13,
										},
									},
								},
								Value: " is: ",
							}, &ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   13,
										},
										File:   "tickscript.flux",
										Source: "${r._level}",
										Start: ast.Position{
											Column: 47,
											Line:   13,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   13,
											},
											File:   "tickscript.flux",
											Source: "r._level",
											Start: ast.Position{
												Column: 49,
												Line:   13,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   13,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 49,
													Line:   13,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   13,
												},
												File:   "tickscript.flux",
												Source: "_level",
												Start: ast.Position{
													Column: 51,
													Line:   13,
												},
											},
										},
										Name: "_level",
									},
								},
							}},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   13,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 14,
										Line:   13,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   13,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 14,
											Line:   13,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   14,
							},
							File:   "tickscript.flux",
							Source: "details=(r)=>\"\"",
							Start: ast.Position{
								Column: 5,
								Line:   14,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   14,
								},
								File:   "tickscript.flux",
								Source: "details",
								Start: ast.Position{
									Column: 5,
									Line:   14,
								},
							},
						},
						Name: "details",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   14,
								},
								File:   "tickscript.flux",
								Source: "(r)=>\"\"",
								Start: ast.Position{
									Column: 13,
									Line:   14,
								},
							},
						},
						Body: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   14,
									},
									File:   "tickscript.flux",
									Source: "\"\"",
									Start: ast.Position{
										Column: 18,
										Line:   14,
									},
								},
							},
							Value: "",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   14,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 14,
										Line:   14,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   14,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 14,
											Line:   14,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   15,
							},
							File:   "tickscript.flux",
							Source: "crit=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   15,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   15,
								},
								File:   "tickscript.flux",
								Source: "crit",
								Start: ast.Position{
									Column: 5,
									Line:   15,
								},
							},
						},
						Name: "crit",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   15,
								},
								File:   "tickscript.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   15,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   15,
									},
									File:   "tickscript.flux",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   15,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   15,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   15,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   15,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   15,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   16,
							},
							File:   "tickscript.flux",
							Source: "warn=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   16,
								},
								File:   "tickscript.flux",
								Source: "warn",
								Start: ast.Position{
									Column: 5,
									Line:   16,
								},
							},
						},
						Name: "warn",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   16,
								},
								File:   "tickscript.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   16,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   16,
									},
									File:   "tickscript.flux",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   16,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   16,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   16,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   16,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   16,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   17,
							},
							File:   "tickscript.flux",
							Source: "info=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   17,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   17,
								},
								File:   "tickscript.flux",
								Source: "info",
								Start: ast.Position{
									Column: 5,
									Line:   17,
								},
							},
						},
						Name: "info",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   17,
								},
								File:   "tickscript.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   17,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   17,
									},
									File:   "tickscript.flux",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   17,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   17,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   17,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   17,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   17,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   18,
							},
							File:   "tickscript.flux",
							Source: "ok=(r) => true",
							Start: ast.Position{
								Column: 5,
								Line:   18,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 7,
									Line:   18,
								},
								File:   "tickscript.flux",
								Source: "ok",
								Start: ast.Position{
									Column: 5,
									Line:   18,
								},
							},
						},
						Name: "ok",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   18,
								},
								File:   "tickscript.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 8,
									Line:   18,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   18,
									},
									File:   "tickscript.flux",
									Source: "true",
									Start: ast.Position{
										Column: 15,
										Line:   18,
									},
								},
							},
							Name: "true",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   18,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 9,
										Line:   18,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   18,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 9,
											Line:   18,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   19,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 5,
								Line:   19,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   19,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   19,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   19,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 12,
								Line:   19,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 23,
						Line:   38,
					},
					File:   "tickscript.flux",
					Source: "topic = (name, tables=<-) =>\n  tables\n    |> set(key: \"_topic\", value: name )\n    |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    |> monitor.write()",
					Start: ast.Position{
						Column: 1,
						Line:   34,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   34,
						},
						File:   "tickscript.flux",
						Source: "topic",
						Start: ast.Position{
							Column: 1,
							Line:   34,
						},
					},
				},
				Name: "topic",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   38,
						},
						File:   "tickscript.flux",
						Source: "(name, tables=<-) =>\n  tables\n    |> set(key: \"_topic\", value: name )\n    |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    |> monitor.write()",
						Start: ast.Position{
							Column: 9,
							Line:   34,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   35,
										},
										File:   "tickscript.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 3,
											Line:   35,
										},
									},
								},
								Name: "tables",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   36,
									},
									File:   "tickscript.flux",
									Source: "tables\n    |> set(key: \"_topic\", value: name )",
									Start: ast.Position{
										Column: 3,
										Line:   35,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   36,
											},
											File:   "tickscript.flux",
											Source: "key: \"_topic\", value: name",
											Start: ast.Position{
												Column: 12,
												Line:   36,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   36,
												},
												File:   "tickscript.flux",
												Source: "key: \"_topic\"",
												Start: ast.Position{
													Column: 12,
													Line:   36,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   36,
													},
													File:   "tickscript.flux",
													Source: "key",
													Start: ast.Position{
														Column: 12,
														Line:   36,
													},
												},
											},
											Name: "key",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   36,
													},
													File:   "tickscript.flux",
													Source: "\"_topic\"",
													Start: ast.Position{
														Column: 17,
														Line:   36,
													},
												},
											},
											Value: "_topic",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   36,
												},
												File:   "tickscript.flux",
												Source: "value: name",
												Start: ast.Position{
													Column: 27,
													Line:   36,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   36,
													},
													File:   "tickscript.flux",
													Source: "value",
													Start: ast.Position{
														Column: 27,
														Line:   36,
													},
												},
											},
											Name: "value",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   36,
													},
													File:   "tickscript.flux",
													Source: "name",
													Start: ast.Position{
														Column: 34,
														Line:   36,
													},
												},
											},
											Name: "name",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   36,
										},
										File:   "tickscript.flux",
										Source: "set(key: \"_topic\", value: name )",
										Start: ast.Position{
											Column: 8,
											Line:   36,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   36,
											},
											File:   "tickscript.flux",
											Source: "set",
											Start: ast.Position{
												Column: 8,
												Line:   36,
											},
										},
									},
									Name: "set",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   37,
								},
								File:   "tickscript.flux",
								Source: "tables\n    |> set(key: \"_topic\", value: name )\n    |> experimental.group(mode: \"extend\", columns: [\"_topic\"])",
								Start: ast.Position{
									Column: 3,
									Line:   35,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   37,
										},
										File:   "tickscript.flux",
										Source: "mode: \"extend\", columns: [\"_topic\"]",
										Start: ast.Position{
											Column: 27,
											Line:   37,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   37,
											},
											File:   "tickscript.flux",
											Source: "mode: \"extend\"",
											Start: ast.Position{
												Column: 27,
												Line:   37,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   37,
												},
												File:   "tickscript.flux",
												Source: "mode",
												Start: ast.Position{
													Column: 27,
													Line:   37,
												},
											},
										},
										Name: "mode",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   37,
												},
												File:   "tickscript.flux",
												Source: "\"extend\"",
												Start: ast.Position{
													Column: 33,
													Line:   37,
												},
											},
										},
										Value: "extend",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   37,
											},
											File:   "tickscript.flux",
											Source: "columns: [\"_topic\"]",
											Start: ast.Position{
												Column: 43,
												Line:   37,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   37,
												},
												File:   "tickscript.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 43,
													Line:   37,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   37,
												},
												File:   "tickscript.flux",
												Source: "[\"_topic\"]",
												Start: ast.Position{
													Column: 52,
													Line:   37,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   37,
													},
													File:   "tickscript.flux",
													Source: "\"_topic\"",
													Start: ast.Position{
														Column: 53,
														Line:   37,
													},
												},
											},
											Value: "_topic",
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   37,
									},
									File:   "tickscript.flux",
									Source: "experimental.group(mode: \"extend\", columns: [\"_topic\"])",
									Start: ast.Position{
										Column: 8,
										Line:   37,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   37,
										},
										File:   "tickscript.flux",
										Source: "experimental.group",
										Start: ast.Position{
											Column: 8,
											Line:   37,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   37,
											},
											File:   "tickscript.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 8,
												Line:   37,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   37,
											},
											File:   "tickscript.flux",
											Source: "group",
											Start: ast.Position{
												Column: 21,
												Line:   37,
											},
										},
									},
									Name: "group",
								},
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   38,
							},
							File:   "tickscript.flux",
							Source: "tables\n    |> set(key: \"_topic\", value: name )\n    |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    |> monitor.write()",
							Start: ast.Position{
								Column: 3,
								Line:   35,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   38,
								},
								File:   "tickscript.flux",
								Source: "monitor.write()",
								Start: ast.Position{
									Column: 8,
									Line:   38,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   38,
									},
									File:   "tickscript.flux",
									Source: "monitor.write",
									Start: ast.Position{
										Column: 8,
										Line:   38,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   38,
										},
										File:   "tickscript.flux",
										Source: "monitor",
										Start: ast.Position{
											Column: 8,
											Line:   38,
										},
									},
								},
								Name: "monitor",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   38,
										},
										File:   "tickscript.flux",
										Source: "write",
										Start: ast.Position{
											Column: 16,
											Line:   38,
										},
									},
								},
								Name: "write",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   34,
							},
							File:   "tickscript.flux",
							Source: "name",
							Start: ast.Position{
								Column: 10,
								Line:   34,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   34,
								},
								File:   "tickscript.flux",
								Source: "name",
								Start: ast.Position{
									Column: 10,
									Line:   34,
								},
							},
						},
						Name: "name",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   34,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 16,
								Line:   34,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   34,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 16,
									Line:   34,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   34,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   34,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   57,
					},
					File:   "tickscript.flux",
					Source: "select = (column=\"_value\", fn=(column, tables=<-) => tables, as, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   50,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   50,
						},
						File:   "tickscript.flux",
						Source: "select",
						Start: ast.Position{
							Column: 1,
							Line:   50,
						},
					},
				},
				Name: "select",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   57,
						},
						File:   "tickscript.flux",
						Source: "(column=\"_value\", fn=(column, tables=<-) => tables, as, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
						Start: ast.Position{
							Column: 10,
							Line:   50,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   57,
							},
							File:   "tickscript.flux",
							Source: "{\n  _column = column\n  _as = as\n  return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
							Start: ast.Position{
								Column: 80,
								Line:   50,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   51,
								},
								File:   "tickscript.flux",
								Source: "_column = column",
								Start: ast.Position{
									Column: 3,
									Line:   51,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   51,
									},
									File:   "tickscript.flux",
									Source: "_column",
									Start: ast.Position{
										Column: 3,
										Line:   51,
									},
								},
							},
							Name: "_column",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   51,
									},
									File:   "tickscript.flux",
									Source: "column",
									Start: ast.Position{
										Column: 13,
										Line:   51,
									},
								},
							},
							Name: "column",
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "_as = as",
								Start: ast.Position{
									Column: 3,
									Line:   52,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   52,
									},
									File:   "tickscript.flux",
									Source: "_as",
									Start: ast.Position{
										Column: 3,
										Line:   52,
									},
								},
							},
							Name: "_as",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   52,
									},
									File:   "tickscript.flux",
									Source: "as",
									Start: ast.Position{
										Column: 9,
										Line:   52,
									},
								},
							},
							Name: "as",
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   54,
											},
											File:   "tickscript.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 5,
												Line:   54,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   55,
										},
										File:   "tickscript.flux",
										Source: "tables\n      |> fn(column: _column)",
										Start: ast.Position{
											Column: 5,
											Line:   54,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   55,
												},
												File:   "tickscript.flux",
												Source: "column: _column",
												Start: ast.Position{
													Column: 13,
													Line:   55,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   55,
													},
													File:   "tickscript.flux",
													Source: "column: _column",
													Start: ast.Position{
														Column: 13,
														Line:   55,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   55,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 13,
															Line:   55,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   55,
														},
														File:   "tickscript.flux",
														Source: "_column",
														Start: ast.Position{
															Column: 21,
															Line:   55,
														},
													},
												},
												Name: "_column",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   55,
											},
											File:   "tickscript.flux",
											Source: "fn(column: _column)",
											Start: ast.Position{
												Column: 10,
												Line:   55,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   55,
												},
												File:   "tickscript.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   55,
												},
											},
										},
										Name: "fn",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   56,
									},
									File:   "tickscript.flux",
									Source: "tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)",
									Start: ast.Position{
										Column: 5,
										Line:   54,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   56,
											},
											File:   "tickscript.flux",
											Source: "fn: (column) => if column == _column then _as else column",
											Start: ast.Position{
												Column: 17,
												Line:   56,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   56,
												},
												File:   "tickscript.flux",
												Source: "fn: (column) => if column == _column then _as else column",
												Start: ast.Position{
													Column: 17,
													Line:   56,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   56,
													},
													File:   "tickscript.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 17,
														Line:   56,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   56,
													},
													File:   "tickscript.flux",
													Source: "(column) => if column == _column then _as else column",
													Start: ast.Position{
														Column: 21,
														Line:   56,
													},
												},
											},
											Body: &ast.ConditionalExpression{
												Alternate: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 74,
																Line:   56,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 68,
																Line:   56,
															},
														},
													},
													Name: "column",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 74,
															Line:   56,
														},
														File:   "tickscript.flux",
														Source: "if column == _column then _as else column",
														Start: ast.Position{
															Column: 33,
															Line:   56,
														},
													},
												},
												Consequent: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 62,
																Line:   56,
															},
															File:   "tickscript.flux",
															Source: "_as",
															Start: ast.Position{
																Column: 59,
																Line:   56,
															},
														},
													},
													Name: "_as",
												},
												Test: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   56,
															},
															File:   "tickscript.flux",
															Source: "column == _column",
															Start: ast.Position{
																Column: 36,
																Line:   56,
															},
														},
													},
													Left: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   56,
																},
																File:   "tickscript.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 36,
																	Line:   56,
																},
															},
														},
														Name: "column",
													},
													Operator: 17,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   56,
																},
																File:   "tickscript.flux",
																Source: "_column",
																Start: ast.Position{
																	Column: 46,
																	Line:   56,
																},
															},
														},
														Name: "_column",
													},
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   56,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 22,
															Line:   56,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   56,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   56,
															},
														},
													},
													Name: "column",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   56,
										},
										File:   "tickscript.flux",
										Source: "rename(fn: (column) => if column == _column then _as else column)",
										Start: ast.Position{
											Column: 10,
											Line:   56,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   56,
											},
											File:   "tickscript.flux",
											Source: "rename",
											Start: ast.Position{
												Column: 10,
												Line:   56,
											},
										},
									},
									Name: "rename",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   56,
								},
								File:   "tickscript.flux",
								Source: "return\n    tables\n      |> fn(column: _column)\n      |> rename(fn: (column) => if column == _column then _as else column)",
								Start: ast.Position{
									Column: 3,
									Line:   53,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   50,
							},
							File:   "tickscript.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 11,
								Line:   50,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   50,
								},
								File:   "tickscript.flux",
								Source: "column",
								Start: ast.Position{
									Column: 11,
									Line:   50,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   50,
								},
								File:   "tickscript.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 18,
									Line:   50,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 60,
								Line:   50,
							},
							File:   "tickscript.flux",
							Source: "fn=(column, tables=<-) => tables",
							Start: ast.Position{
								Column: 28,
								Line:   50,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   50,
								},
								File:   "tickscript.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   50,
								},
							},
						},
						Name: "fn",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   50,
								},
								File:   "tickscript.flux",
								Source: "(column, tables=<-) => tables",
								Start: ast.Position{
									Column: 31,
									Line:   50,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   50,
									},
									File:   "tickscript.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 54,
										Line:   50,
									},
								},
							},
							Name: "tables",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   50,
									},
									File:   "tickscript.flux",
									Source: "column",
									Start: ast.Position{
										Column: 32,
										Line:   50,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   50,
										},
										File:   "tickscript.flux",
										Source: "column",
										Start: ast.Position{
											Column: 32,
											Line:   50,
										},
									},
								},
								Name: "column",
							},
							Value: nil,
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   50,
									},
									File:   "tickscript.flux",
									Source: "tables=<-",
									Start: ast.Position{
										Column: 40,
										Line:   50,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   50,
										},
										File:   "tickscript.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 40,
											Line:   50,
										},
									},
								},
								Name: "tables",
							},
							Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   50,
									},
									File:   "tickscript.flux",
									Source: "<-",
									Start: ast.Position{
										Column: 47,
										Line:   50,
									},
								},
							}},
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   50,
							},
							File:   "tickscript.flux",
							Source: "as",
							Start: ast.Position{
								Column: 62,
								Line:   50,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   50,
								},
								File:   "tickscript.flux",
								Source: "as",
								Start: ast.Position{
									Column: 62,
									Line:   50,
								},
							},
						},
						Name: "as",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   50,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 66,
								Line:   50,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   50,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 66,
									Line:   50,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   50,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 73,
								Line:   50,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   73,
					},
					File:   "tickscript.flux",
					Source: "selectWindow = (column=\"_value\", fn, as, every, defaultValue, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   65,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   65,
						},
						File:   "tickscript.flux",
						Source: "selectWindow",
						Start: ast.Position{
							Column: 1,
							Line:   65,
						},
					},
				},
				Name: "selectWindow",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   73,
						},
						File:   "tickscript.flux",
						Source: "(column=\"_value\", fn, as, every, defaultValue, tables=<-) => {\n  _column = column\n  _as = as\n  return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
						Start: ast.Position{
							Column: 16,
							Line:   65,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   73,
							},
							File:   "tickscript.flux",
							Source: "{\n  _column = column\n  _as = as\n  return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)\n}",
							Start: ast.Position{
								Column: 77,
								Line:   65,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   66,
								},
								File:   "tickscript.flux",
								Source: "_column = column",
								Start: ast.Position{
									Column: 3,
									Line:   66,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   66,
									},
									File:   "tickscript.flux",
									Source: "_column",
									Start: ast.Position{
										Column: 3,
										Line:   66,
									},
								},
							},
							Name: "_column",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   66,
									},
									File:   "tickscript.flux",
									Source: "column",
									Start: ast.Position{
										Column: 13,
										Line:   66,
									},
								},
							},
							Name: "column",
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   67,
								},
								File:   "tickscript.flux",
								Source: "_as = as",
								Start: ast.Position{
									Column: 3,
									Line:   67,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   67,
									},
									File:   "tickscript.flux",
									Source: "_as",
									Start: ast.Position{
										Column: 3,
										Line:   67,
									},
								},
							},
							Name: "_as",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   67,
									},
									File:   "tickscript.flux",
									Source: "as",
									Start: ast.Position{
										Column: 9,
										Line:   67,
									},
								},
							},
							Name: "as",
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   69,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 5,
													Line:   69,
												},
											},
										},
										Name: "tables",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 83,
												Line:   70,
											},
											File:   "tickscript.flux",
											Source: "tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)",
											Start: ast.Position{
												Column: 5,
												Line:   69,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 82,
														Line:   70,
													},
													File:   "tickscript.flux",
													Source: "every: every, fn: fn, column: _column, createEmpty: true",
													Start: ast.Position{
														Column: 26,
														Line:   70,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   70,
														},
														File:   "tickscript.flux",
														Source: "every: every",
														Start: ast.Position{
															Column: 26,
															Line:   70,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   70,
															},
															File:   "tickscript.flux",
															Source: "every",
															Start: ast.Position{
																Column: 26,
																Line:   70,
															},
														},
													},
													Name: "every",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   70,
															},
															File:   "tickscript.flux",
															Source: "every",
															Start: ast.Position{
																Column: 33,
																Line:   70,
															},
														},
													},
													Name: "every",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   70,
														},
														File:   "tickscript.flux",
														Source: "fn: fn",
														Start: ast.Position{
															Column: 40,
															Line:   70,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   70,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 40,
																Line:   70,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   70,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 44,
																Line:   70,
															},
														},
													},
													Name: "fn",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 63,
															Line:   70,
														},
														File:   "tickscript.flux",
														Source: "column: _column",
														Start: ast.Position{
															Column: 48,
															Line:   70,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   70,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 48,
																Line:   70,
															},
														},
													},
													Name: "column",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 63,
																Line:   70,
															},
															File:   "tickscript.flux",
															Source: "_column",
															Start: ast.Position{
																Column: 56,
																Line:   70,
															},
														},
													},
													Name: "_column",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 82,
															Line:   70,
														},
														File:   "tickscript.flux",
														Source: "createEmpty: true",
														Start: ast.Position{
															Column: 65,
															Line:   70,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 76,
																Line:   70,
															},
															File:   "tickscript.flux",
															Source: "createEmpty",
															Start: ast.Position{
																Column: 65,
																Line:   70,
															},
														},
													},
													Name: "createEmpty",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 82,
																Line:   70,
															},
															File:   "tickscript.flux",
															Source: "true",
															Start: ast.Position{
																Column: 78,
																Line:   70,
															},
														},
													},
													Name: "true",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   70,
												},
												File:   "tickscript.flux",
												Source: "aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)",
												Start: ast.Position{
													Column: 10,
													Line:   70,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   70,
													},
													File:   "tickscript.flux",
													Source: "aggregateWindow",
													Start: ast.Position{
														Column: 10,
														Line:   70,
													},
												},
											},
											Name: "aggregateWindow",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   71,
										},
										File:   "tickscript.flux",
										Source: "tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)",
										Start: ast.Position{
											Column: 5,
											Line:   69,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   71,
												},
												File:   "tickscript.flux",
												Source: "column: _column, value: defaultValue",
												Start: ast.Position{
													Column: 15,
													Line:   71,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   71,
													},
													File:   "tickscript.flux",
													Source: "column: _column",
													Start: ast.Position{
														Column: 15,
														Line:   71,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   71,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 15,
															Line:   71,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   71,
														},
														File:   "tickscript.flux",
														Source: "_column",
														Start: ast.Position{
															Column: 23,
															Line:   71,
														},
													},
												},
												Name: "_column",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   71,
													},
													File:   "tickscript.flux",
													Source: "value: defaultValue",
													Start: ast.Position{
														Column: 32,
														Line:   71,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   71,
														},
														File:   "tickscript.flux",
														Source: "value",
														Start: ast.Position{
															Column: 32,
															Line:   71,
														},
													},
												},
												Name: "value",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   71,
														},
														File:   "tickscript.flux",
														Source: "defaultValue",
														Start: ast.Position{
															Column: 39,
															Line:   71,
														},
													},
												},
												Name: "defaultValue",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   71,
											},
											File:   "tickscript.flux",
											Source: "fill(column: _column, value: defaultValue)",
											Start: ast.Position{
												Column: 10,
												Line:   71,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   71,
												},
												File:   "tickscript.flux",
												Source: "fill",
												Start: ast.Position{
													Column: 10,
													Line:   71,
												},
											},
										},
										Name: "fill",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   72,
									},
									File:   "tickscript.flux",
									Source: "tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)",
									Start: ast.Position{
										Column: 5,
										Line:   69,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   72,
											},
											File:   "tickscript.flux",
											Source: "fn: (column) => if column == _column then _as else column",
											Start: ast.Position{
												Column: 17,
												Line:   72,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   72,
												},
												File:   "tickscript.flux",
												Source: "fn: (column) => if column == _column then _as else column",
												Start: ast.Position{
													Column: 17,
													Line:   72,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   72,
													},
													File:   "tickscript.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 17,
														Line:   72,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   72,
													},
													File:   "tickscript.flux",
													Source: "(column) => if column == _column then _as else column",
													Start: ast.Position{
														Column: 21,
														Line:   72,
													},
												},
											},
											Body: &ast.ConditionalExpression{
												Alternate: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 74,
																Line:   72,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 68,
																Line:   72,
															},
														},
													},
													Name: "column",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 74,
															Line:   72,
														},
														File:   "tickscript.flux",
														Source: "if column == _column then _as else column",
														Start: ast.Position{
															Column: 33,
															Line:   72,
														},
													},
												},
												Consequent: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 62,
																Line:   72,
															},
															File:   "tickscript.flux",
															Source: "_as",
															Start: ast.Position{
																Column: 59,
																Line:   72,
															},
														},
													},
													Name: "_as",
												},
												Test: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   72,
															},
															File:   "tickscript.flux",
															Source: "column == _column",
															Start: ast.Position{
																Column: 36,
																Line:   72,
															},
														},
													},
													Left: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   72,
																},
																File:   "tickscript.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 36,
																	Line:   72,
																},
															},
														},
														Name: "column",
													},
													Operator: 17,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   72,
																},
																File:   "tickscript.flux",
																Source: "_column",
																Start: ast.Position{
																	Column: 46,
																	Line:   72,
																},
															},
														},
														Name: "_column",
													},
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   72,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 22,
															Line:   72,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   72,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   72,
															},
														},
													},
													Name: "column",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   72,
										},
										File:   "tickscript.flux",
										Source: "rename(fn: (column) => if column == _column then _as else column)",
										Start: ast.Position{
											Column: 10,
											Line:   72,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   72,
											},
											File:   "tickscript.flux",
											Source: "rename",
											Start: ast.Position{
												Column: 10,
												Line:   72,
											},
										},
									},
									Name: "rename",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   72,
								},
								File:   "tickscript.flux",
								Source: "return\n    tables\n      |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n      |> fill(column: _column, value: defaultValue)\n      |> rename(fn: (column) => if column == _column then _as else column)",
								Start: ast.Position{
									Column: 3,
									Line:   68,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   65,
							},
							File:   "tickscript.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 17,
								Line:   65,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   65,
								},
								File:   "tickscript.flux",
								Source: "column",
								Start: ast.Position{
									Column: 17,
									Line:   65,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   65,
								},
								File:   "tickscript.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 24,
									Line:   65,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   65,
							},
							File:   "tickscript.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 34,
								Line:   65,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   65,
								},
								File:   "tickscript.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 34,
									Line:   65,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   65,
							},
							File:   "tickscript.flux",
							Source: "as",
							Start: ast.Position{
								Column: 38,
								Line:   65,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   65,
								},
								File:   "tickscript.flux",
								Source: "as",
								Start: ast.Position{
									Column: 38,
									Line:   65,
								},
							},
						},
						Name: "as",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   65,
							},
							File:   "tickscript.flux",
							Source: "every",
							Start: ast.Position{
								Column: 42,
								Line:   65,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   65,
								},
								File:   "tickscript.flux",
								Source: "every",
								Start: ast.Position{
									Column: 42,
									Line:   65,
								},
							},
						},
						Name: "every",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 61,
								Line:   65,
							},
							File:   "tickscript.flux",
							Source: "defaultValue",
							Start: ast.Position{
								Column: 49,
								Line:   65,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   65,
								},
								File:   "tickscript.flux",
								Source: "defaultValue",
								Start: ast.Position{
									Column: 49,
									Line:   65,
								},
							},
						},
						Name: "defaultValue",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   65,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 63,
								Line:   65,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   65,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 63,
									Line:   65,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   65,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 70,
								Line:   65,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   81,
					},
					File:   "tickscript.flux",
					Source: "compute = select",
					Start: ast.Position{
						Column: 1,
						Line:   81,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   81,
						},
						File:   "tickscript.flux",
						Source: "compute",
						Start: ast.Position{
							Column: 1,
							Line:   81,
						},
					},
				},
				Name: "compute",
			},
			Init: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   81,
						},
						File:   "tickscript.flux",
						Source: "select",
						Start: ast.Position{
							Column: 11,
							Line:   81,
						},
					},
				},
				Name: "select",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   88,
					},
					File:   "tickscript.flux",
					Source: "groupBy = (columns, tables=<-) =>\n  tables\n    |> group(columns: columns)\n    |> experimental.group(columns: [\"_measurement\"], mode:\"extend\")",
					Start: ast.Position{
						Column: 1,
						Line:   85,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   85,
						},
						File:   "tickscript.flux",
						Source: "groupBy",
						Start: ast.Position{
							Column: 1,
							Line:   85,
						},
					},
				},
				Name: "groupBy",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   88,
						},
						File:   "tickscript.flux",
						Source: "(columns, tables=<-) =>\n  tables\n    |> group(columns: columns)\n    |> experimental.group(columns: [\"_measurement\"], mode:\"extend\")",
						Start: ast.Position{
							Column: 11,
							Line:   85,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   86,
									},
									File:   "tickscript.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 3,
										Line:   86,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   87,
								},
								File:   "tickscript.flux",
								Source: "tables\n    |> group(columns: columns)",
								Start: ast.Position{
									Column: 3,
									Line:   86,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   87,
										},
										File:   "tickscript.flux",
										Source: "columns: columns",
										Start: ast.Position{
											Column: 14,
											Line:   87,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   87,
											},
											File:   "tickscript.flux",
											Source: "columns: columns",
											Start: ast.Position{
												Column: 14,
												Line:   87,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   87,
												},
												File:   "tickscript.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 14,
													Line:   87,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   87,
												},
												File:   "tickscript.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 23,
													Line:   87,
												},
											},
										},
										Name: "columns",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   87,
									},
									File:   "tickscript.flux",
									Source: "group(columns: columns)",
									Start: ast.Position{
										Column: 8,
										Line:   87,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   87,
										},
										File:   "tickscript.flux",
										Source: "group",
										Start: ast.Position{
											Column: 8,
											Line:   87,
										},
									},
								},
								Name: "group",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   88,
							},
							File:   "tickscript.flux",
							Source: "tables\n    |> group(columns: columns)\n    |> experimental.group(columns: [\"_measurement\"], mode:\"extend\")",
							Start: ast.Position{
								Column: 3,
								Line:   86,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   88,
									},
									File:   "tickscript.flux",
									Source: "columns: [\"_measurement\"], mode:\"extend\"",
									Start: ast.Position{
										Column: 27,
										Line:   88,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   88,
										},
										File:   "tickscript.flux",
										Source: "columns: [\"_measurement\"]",
										Start: ast.Position{
											Column: 27,
											Line:   88,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   88,
											},
											File:   "tickscript.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 27,
												Line:   88,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   88,
											},
											File:   "tickscript.flux",
											Source: "[\"_measurement\"]",
											Start: ast.Position{
												Column: 36,
												Line:   88,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   88,
												},
												File:   "tickscript.flux",
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 37,
													Line:   88,
												},
											},
										},
										Value: "_measurement",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   88,
										},
										File:   "tickscript.flux",
										Source: "mode:\"extend\"",
										Start: ast.Position{
											Column: 54,
											Line:   88,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   88,
											},
											File:   "tickscript.flux",
											Source: "mode",
											Start: ast.Position{
												Column: 54,
												Line:   88,
											},
										},
									},
									Name: "mode",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   88,
											},
											File:   "tickscript.flux",
											Source: "\"extend\"",
											Start: ast.Position{
												Column: 59,
												Line:   88,
											},
										},
									},
									Value: "extend",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   88,
								},
								File:   "tickscript.flux",
								Source: "experimental.group(columns: [\"_measurement\"], mode:\"extend\")",
								Start: ast.Position{
									Column: 8,
									Line:   88,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   88,
									},
									File:   "tickscript.flux",
									Source: "experimental.group",
									Start: ast.Position{
										Column: 8,
										Line:   88,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   88,
										},
										File:   "tickscript.flux",
										Source: "experimental",
										Start: ast.Position{
											Column: 8,
											Line:   88,
										},
									},
								},
								Name: "experimental",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   88,
										},
										File:   "tickscript.flux",
										Source: "group",
										Start: ast.Position{
											Column: 21,
											Line:   88,
										},
									},
								},
								Name: "group",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   85,
							},
							File:   "tickscript.flux",
							Source: "columns",
							Start: ast.Position{
								Column: 12,
								Line:   85,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   85,
								},
								File:   "tickscript.flux",
								Source: "columns",
								Start: ast.Position{
									Column: 12,
									Line:   85,
								},
							},
						},
						Name: "columns",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   85,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 21,
								Line:   85,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   85,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 21,
									Line:   85,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   85,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   85,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 71,
						Line:   95,
					},
					File:   "tickscript.flux",
					Source: "join = (tables, on=[\"_time\"], measurement) =>\n    universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))\n      |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
					Start: ast.Position{
						Column: 1,
						Line:   92,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   92,
						},
						File:   "tickscript.flux",
						Source: "join",
						Start: ast.Position{
							Column: 1,
							Line:   92,
						},
					},
				},
				Name: "join",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 71,
							Line:   95,
						},
						File:   "tickscript.flux",
						Source: "(tables, on=[\"_time\"], measurement) =>\n    universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))\n      |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
						Start: ast.Position{
							Column: 8,
							Line:   92,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   93,
										},
										File:   "tickscript.flux",
										Source: "tables: tables, on: on",
										Start: ast.Position{
											Column: 19,
											Line:   93,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   93,
											},
											File:   "tickscript.flux",
											Source: "tables: tables",
											Start: ast.Position{
												Column: 19,
												Line:   93,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   93,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 19,
													Line:   93,
												},
											},
										},
										Name: "tables",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   93,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 27,
													Line:   93,
												},
											},
										},
										Name: "tables",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   93,
											},
											File:   "tickscript.flux",
											Source: "on: on",
											Start: ast.Position{
												Column: 35,
												Line:   93,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   93,
												},
												File:   "tickscript.flux",
												Source: "on",
												Start: ast.Position{
													Column: 35,
													Line:   93,
												},
											},
										},
										Name: "on",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   93,
												},
												File:   "tickscript.flux",
												Source: "on",
												Start: ast.Position{
													Column: 39,
													Line:   93,
												},
											},
										},
										Name: "on",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   93,
									},
									File:   "tickscript.flux",
									Source: "universe.join(tables: tables, on: on)",
									Start: ast.Position{
										Column: 5,
										Line:   93,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   93,
										},
										File:   "tickscript.flux",
										Source: "universe.join",
										Start: ast.Position{
											Column: 5,
											Line:   93,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   93,
											},
											File:   "tickscript.flux",
											Source: "universe",
											Start: ast.Position{
												Column: 5,
												Line:   93,
											},
										},
									},
									Name: "universe",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   93,
											},
											File:   "tickscript.flux",
											Source: "join",
											Start: ast.Position{
												Column: 14,
												Line:   93,
											},
										},
									},
									Name: "join",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   94,
								},
								File:   "tickscript.flux",
								Source: "universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))",
								Start: ast.Position{
									Column: 5,
									Line:   93,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   94,
										},
										File:   "tickscript.flux",
										Source: "fn: (r) => ({ r with _measurement: measurement })",
										Start: ast.Position{
											Column: 14,
											Line:   94,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   94,
											},
											File:   "tickscript.flux",
											Source: "fn: (r) => ({ r with _measurement: measurement })",
											Start: ast.Position{
												Column: 14,
												Line:   94,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   94,
												},
												File:   "tickscript.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 14,
													Line:   94,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   94,
												},
												File:   "tickscript.flux",
												Source: "(r) => ({ r with _measurement: measurement })",
												Start: ast.Position{
													Column: 18,
													Line:   94,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 63,
														Line:   94,
													},
													File:   "tickscript.flux",
													Source: "({ r with _measurement: measurement })",
													Start: ast.Position{
														Column: 25,
														Line:   94,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   94,
														},
														File:   "tickscript.flux",
														Source: "{ r with _measurement: measurement }",
														Start: ast.Position{
															Column: 26,
															Line:   94,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   94,
															},
															File:   "tickscript.flux",
															Source: "_measurement: measurement",
															Start: ast.Position{
																Column: 35,
																Line:   94,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   94,
																},
																File:   "tickscript.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 35,
																	Line:   94,
																},
															},
														},
														Name: "_measurement",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   94,
																},
																File:   "tickscript.flux",
																Source: "measurement",
																Start: ast.Position{
																	Column: 49,
																	Line:   94,
																},
															},
														},
														Name: "measurement",
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   94,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 28,
																Line:   94,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   94,
													},
													File:   "tickscript.flux",
													Source: "r",
													Start: ast.Position{
														Column: 19,
														Line:   94,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   94,
														},
														File:   "tickscript.flux",
														Source: "r",
														Start: ast.Position{
															Column: 19,
															Line:   94,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   94,
									},
									File:   "tickscript.flux",
									Source: "map(fn: (r) => ({ r with _measurement: measurement }))",
									Start: ast.Position{
										Column: 10,
										Line:   94,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   94,
										},
										File:   "tickscript.flux",
										Source: "map",
										Start: ast.Position{
											Column: 10,
											Line:   94,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   95,
							},
							File:   "tickscript.flux",
							Source: "universe.join(tables: tables, on: on)\n      |> map(fn: (r) => ({ r with _measurement: measurement }))\n      |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
							Start: ast.Position{
								Column: 5,
								Line:   93,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   95,
									},
									File:   "tickscript.flux",
									Source: "columns: [\"_measurement\"], mode: \"extend\"",
									Start: ast.Position{
										Column: 29,
										Line:   95,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   95,
										},
										File:   "tickscript.flux",
										Source: "columns: [\"_measurement\"]",
										Start: ast.Position{
											Column: 29,
											Line:   95,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   95,
											},
											File:   "tickscript.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 29,
												Line:   95,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   95,
											},
											File:   "tickscript.flux",
											Source: "[\"_measurement\"]",
											Start: ast.Position{
												Column: 38,
												Line:   95,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   95,
												},
												File:   "tickscript.flux",
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 39,
													Line:   95,
												},
											},
										},
										Value: "_measurement",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   95,
										},
										File:   "tickscript.flux",
										Source: "mode: \"extend\"",
										Start: ast.Position{
											Column: 56,
											Line:   95,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   95,
											},
											File:   "tickscript.flux",
											Source: "mode",
											Start: ast.Position{
												Column: 56,
												Line:   95,
											},
										},
									},
									Name: "mode",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   95,
											},
											File:   "tickscript.flux",
											Source: "\"extend\"",
											Start: ast.Position{
												Column: 62,
												Line:   95,
											},
										},
									},
									Value: "extend",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   95,
								},
								File:   "tickscript.flux",
								Source: "experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
								Start: ast.Position{
									Column: 10,
									Line:   95,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   95,
									},
									File:   "tickscript.flux",
									Source: "experimental.group",
									Start: ast.Position{
										Column: 10,
										Line:   95,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   95,
										},
										File:   "tickscript.flux",
										Source: "experimental",
										Start: ast.Position{
											Column: 10,
											Line:   95,
										},
									},
								},
								Name: "experimental",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   95,
										},
										File:   "tickscript.flux",
										Source: "group",
										Start: ast.Position{
											Column: 23,
											Line:   95,
										},
									},
								},
								Name: "group",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   92,
							},
							File:   "tickscript.flux",
							Source: "tables",
							Start: ast.Position{
								Column: 9,
								Line:   92,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   92,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 9,
									Line:   92,
								},
							},
						},
						Name: "tables",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   92,
							},
							File:   "tickscript.flux",
							Source: "on=[\"_time\"]",
							Start: ast.Position{
								Column: 17,
								Line:   92,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   92,
								},
								File:   "tickscript.flux",
								Source: "on",
								Start: ast.Position{
									Column: 17,
									Line:   92,
								},
							},
						},
						Name: "on",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   92,
								},
								File:   "tickscript.flux",
								Source: "[\"_time\"]",
								Start: ast.Position{
									Column: 20,
									Line:   92,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   92,
									},
									File:   "tickscript.flux",
									Source: "\"_time\"",
									Start: ast.Position{
										Column: 21,
										Line:   92,
									},
								},
							},
							Value: "_time",
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   92,
							},
							File:   "tickscript.flux",
							Source: "measurement",
							Start: ast.Position{
								Column: 31,
								Line:   92,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   92,
								},
								File:   "tickscript.flux",
								Source: "measurement",
								Start: ast.Position{
									Column: 31,
									Line:   92,
								},
							},
						},
						Name: "measurement",
					},
					Value: nil,
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   3,
					},
					File:   "tickscript.flux",
					Source: "import \"experimental\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   3,
						},
						File:   "tickscript.flux",
						Source: "\"experimental\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "experimental",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   4,
					},
					File:   "tickscript.flux",
					Source: "import \"influxdata/influxdb\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   4,
						},
						File:   "tickscript.flux",
						Source: "\"influxdata/influxdb\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "influxdata/influxdb",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 37,
						Line:   5,
					},
					File:   "tickscript.flux",
					Source: "import \"influxdata/influxdb/monitor\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 37,
							Line:   5,
						},
						File:   "tickscript.flux",
						Source: "\"influxdata/influxdb/monitor\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "influxdata/influxdb/monitor",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 36,
						Line:   6,
					},
					File:   "tickscript.flux",
					Source: "import \"influxdata/influxdb/schema\"",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   6,
						},
						File:   "tickscript.flux",
						Source: "\"influxdata/influxdb/schema\"",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				Value: "influxdata/influxdb/schema",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   7,
					},
					File:   "tickscript.flux",
					Source: "import \"universe\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   7,
						},
						File:   "tickscript.flux",
						Source: "\"universe\"",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				Value: "universe",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "tickscript.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   1,
					},
					File:   "tickscript.flux",
					Source: "package tickscript",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   1,
						},
						File:   "tickscript.flux",
						Source: "tickscript",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "tickscript",
			},
		},
	}},
	Package: "tickscript",
	Path:    "contrib/bonitoo-io/tickscript",
}
